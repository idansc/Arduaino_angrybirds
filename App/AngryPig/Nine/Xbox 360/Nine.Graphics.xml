<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Nine.Graphics</name>
    </assembly>
    <members>
        <member name="T:Nine.Animations.BoneAnimationClipReader">
            <summary>
            Content reader for <c>BoneAnimationClip</c>.
            </summary>
        </member>
        <member name="T:Nine.Animations.SpriteAnimationReader">
            <summary>
            Content reader for <c>SpriteAnimation</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.GeometryReader">
            <summary>
            Content reader for <c>Geometry</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelCollisionReader">
            <summary>
            Content reader for <c>ModelCollision</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelMeshPartTagReader">
            <summary>
            Content reader for <c>ModelMeshPartTag</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelSkeletonDataReader">
            <summary>
            Content reader for <c>ModelSkeletonData</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelTagReader">
            <summary>
            Content reader for <c>ModelTag</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.AlphaTestMaterialReader">
            <summary>
            Content reader for <c>AlphaTestMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.BasicMaterialReader">
            <summary>
            Content reader for <c>BasicMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.CustomMaterialReader">
            <summary>
            Content reader for <c>CustomMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.DecalMaterialReader">
            <summary>
            Content reader for <c>DecalMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.DualTextureMaterialReader">
            <summary>
            Content reader for <c>DualTextureMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EnvironmentMapMaterialReader">
            <summary>
            Content reader for <c>EnvironmentMapMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.LeveledMaterialReader">
            <summary>
            Content reader for <c>LeveledMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.LinkedMaterialReader">
            <summary>
            Content reader for <c>LinkedMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.SkinnedMaterialReader">
            <summary>
            Content reader for <c>SkinnedMaterial</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.AmbientLightEffectPartReader">
            <summary>
            Content reader for <c>AmbientLightEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.BasicTextureEffectPartReader">
            <summary>
            Content reader for <c>BasicTextureEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.BeginLightEffectPartReader">
            <summary>
            Content reader for <c>BeginLightEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.ColorMatrixEffectPartReader">
            <summary>
            Content reader for <c>ColorMatrixEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.DeferredLightsEffectPartReader">
            <summary>
            Content reader for <c>DeferredLightsEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.DetailTextureEffectPartReader">
            <summary>
            Content reader for <c>DetailTextureEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.DirectionalLightEffectPartReader">
            <summary>
            Content reader for <c>DirectionalLightEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.DualTextureEffectPartReader">
            <summary>
            Content reader for <c>DualTextureEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.EmissiveMapEffectPartReader">
            <summary>
            Content reader for <c>EmissiveMapEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.FogEffectPartReader">
            <summary>
            Content reader for <c>FogEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.MaterialEffectPartReader">
            <summary>
            Content reader for <c>MaterialEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.NormalMapEffectPartReader">
            <summary>
            Content reader for <c>NormalMapEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.OverlayTextureEffectPartReader">
            <summary>
            Content reader for <c>OverlayTextureEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.PointLightEffectPartReader">
            <summary>
            Content reader for <c>PointLightEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.ShadowMapEffectPartReader">
            <summary>
            Content reader for <c>ShadowMapEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.SkinTransformEffectPartReader">
            <summary>
            Content reader for <c>SkinTransformEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.SpecularMapEffectPartReader">
            <summary>
            Content reader for <c>SpecularMapEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.SplatterTextureEffectPartReader">
            <summary>
            Content reader for <c>SplatterTextureEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.SpotLightEffectPartReader">
            <summary>
            Content reader for <c>SpotLightEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.TextureTransformEffectPartReader">
            <summary>
            Content reader for <c>TextureTransformEffectPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.AmbientLightReader">
            <summary>
            Content reader for <c>AmbientLight</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.CameraReader">
            <summary>
            Content reader for <c>Camera</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DecalReader">
            <summary>
            Content reader for <c>Decal</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DirectionalLightReader">
            <summary>
            Content reader for <c>DirectionalLight</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DisplayObjectReader">
            <summary>
            Content reader for <c>DisplayObject</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableModelReader">
            <summary>
            Content reader for <c>DrawableModel</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableModelPartReader">
            <summary>
            Content reader for <c>DrawableModelPart</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableParticleEffectReader">
            <summary>
            Content reader for <c>DrawableParticleEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableSurfaceReader">
            <summary>
            Content reader for <c>DrawableSurface</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableSurfacePatchReader">
            <summary>
            Content reader for <c>DrawableSurfacePatch</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.FogReader">
            <summary>
            Content reader for <c>Fog</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.PointLightReader">
            <summary>
            Content reader for <c>PointLight</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.SceneReader">
            <summary>
            Content reader for <c>Scene</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.SkyBoxReader">
            <summary>
            Content reader for <c>SkyBox</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.SpotLightReader">
            <summary>
            Content reader for <c>SpotLight</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.TransformBindingReader">
            <summary>
            Content reader for <c>TransformBinding</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.AbsorbControllerReader">
            <summary>
            Content reader for <c>AbsorbController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.BoxEmitterReader">
            <summary>
            Content reader for <c>BoxEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ColorControllerReader">
            <summary>
            Content reader for <c>ColorController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.CylinderEmitterReader">
            <summary>
            Content reader for <c>CylinderEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.FadeControllerReader">
            <summary>
            Content reader for <c>FadeController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ForceControllerReader">
            <summary>
            Content reader for <c>ForceController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.LineEmitterReader">
            <summary>
            Content reader for <c>LineEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleEffectReader">
            <summary>
            Content reader for <c>ParticleEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.PointEmitterReader">
            <summary>
            Content reader for <c>PointEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.RotationControllerReader">
            <summary>
            Content reader for <c>RotationController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SizeControllerReader">
            <summary>
            Content reader for <c>SizeController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SpeedControllerReader">
            <summary>
            Content reader for <c>SpeedController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SphereEmitterReader">
            <summary>
            Content reader for <c>SphereEmitter</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.TangentForceControllerReader">
            <summary>
            Content reader for <c>TangentForceController</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.AdoptionEffectReader">
            <summary>
            Content reader for <c>AdoptionEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.AntiAliasEffectReader">
            <summary>
            Content reader for <c>AntiAliasEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.BasicScreenEffectReader">
            <summary>
            Content reader for <c>BasicScreenEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.BlurEffectReader">
            <summary>
            Content reader for <c>BlurEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ChainedScreenEffectReader">
            <summary>
            Content reader for <c>ChainedScreenEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ColorMatrixEffectReader">
            <summary>
            Content reader for <c>ColorMatrixEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.DepthOfFieldEffectReader">
            <summary>
            Content reader for <c>DepthOfFieldEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.EmbossEffectReader">
            <summary>
            Content reader for <c>EmbossEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.LuminanceEffectReader">
            <summary>
            Content reader for <c>LuminanceEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.MultiPassScreenEffectReader">
            <summary>
            Content reader for <c>MultiPassScreenEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPassReader">
            <summary>
            Content reader for <c>MultiPassScreenEffectPass</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.NoiseEffectReader">
            <summary>
            Content reader for <c>NoiseEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.PixelateEffectReader">
            <summary>
            Content reader for <c>PixelateEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.RadialBlurEffectReader">
            <summary>
            Content reader for <c>RadialBlurEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ScaleEffectReader">
            <summary>
            Content reader for <c>ScaleEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ScreenEffectReader">
            <summary>
            Content reader for <c>ScreenEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ThresholdEffectReader">
            <summary>
            Content reader for <c>ThresholdEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ToneMappingEffectReader">
            <summary>
            Content reader for <c>ToneMappingEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.WiggleEffectReader">
            <summary>
            Content reader for <c>WiggleEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.AlphaTestMaterial">
            <summary>
            Effect instance for <c>AlphaTestEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.Material">
            <summary>
            Represents a local copy of settings of the specified effect.
            </summary>
        </member>
        <member name="T:Nine.Graphics.IEffectInstance">
            <summary>
            Defines a wrapper around effect. Each effect instance stores
            a local copy of effect parameter values, this values are pushed to
            the underlying effect when Apply is called.
            </summary>
        </member>
        <member name="M:Nine.Graphics.IEffectInstance.Apply">
            <summary>
            Applys the parameter values.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IEffectInstance.Effect">
            <summary>
            Gets the underlying effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Material.Find``1">
            <summary>
            Queries the material for the specified interface T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Material.Apply">
            <summary>
            Applys the parameter values to the underlying effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Material.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Nine.Graphics.Effects.Material.IsTransparent">
            <summary>
            Gets whether this material is transparent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Material.IsTransparentValue">
            <summary>
            When overriden, returns whether the rendered object is transparent under
            current material settings.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Material.IsDeferred">
            <summary>
            Gets a value indicating whether this material uses deferred lighting.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Material.DepthAlphaEnabled">
            <summary>
            Gets or sets a value indicating whether texture alpha test is enabled when
            generating depth info. This value is usually used to generate shadow maps.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Material.TwoSided">
            <summary>
            Gets or sets a value indicating whether the underlying mesh rendered using
            this material is double sided.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Material.Effect">
            <summary>
            Gets the underlying effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Material.GraphicsBufferEffect">
            <summary>
            Gets the deferred effect used to generate the graphics buffer.
            If null is returned, the default graphics buffer effect is used.
            </summary>
        </member>
        <member name="T:Nine.Graphics.IEffectTexture">
            <summary>
            Gets or sets texture parameters for the current effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.IEffectTexture.SetTexture(Nine.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets the texture with the specified texture usage.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IEffectTexture.Texture">
            <summary>
            Gets or sets the primiary diffuse texture of the current effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.AlphaTestMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of <c>AlphaTestMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.AlphaTestMaterial.#ctor(Microsoft.Xna.Framework.Graphics.AlphaTestEffect)">
            <summary>
            Initializes a new instance of <c>AlphaTestMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.AlphaTestMaterial.Apply">
            <summary>
            Applys the parameter values to the underlying AlphaTestMaterial.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.AlphaTestMaterial.Clone">
            <summary>
            Clones the parameter values to a new instance of AlphaTestMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.AlphaTestMaterial.Effect">
            <summary>
            Gets the underlying AlphaTestMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.AlphaTestMaterial.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.AlphaTestMaterial.AlphaFunction">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.AlphaTestMaterial.DiffuseColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.AlphaTestMaterial.ReferenceAlpha">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.AlphaTestMaterial.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.AlphaTestMaterial.VertexColorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.AlphaTestMaterial.IsTransparentValue">
            <summary>
            When overriden, returns whether the rendered object is transparent under
            current material settings.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.BasicMaterial">
            <summary>
            Effect instance for <c>BasicEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.IEffectLights`1">
            <summary>
            Gets or sets lighting parameters for the current effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IEffectLights`1.Lights">
            <summary>
            Gets a read only collection of lights exposed by this effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IAmbientLight.AmbientLightColor">
            <summary>
            Gets or sets the ambient light color.
            </summary>
        </member>
        <member name="T:Nine.Graphics.IEffectMaterial">
            <summary>
            Contains commonly used material parameters.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IEffectMaterial.Alpha">
            <summary>
            Gets or sets the opaque of the effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IEffectMaterial.DiffuseColor">
            <summary>
            Gets or sets the diffuse color of the effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IEffectMaterial.EmissiveColor">
            <summary>
            Gets or sets the emissive color of the effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IEffectMaterial.SpecularColor">
            <summary>
            Gets or sets the specular color of the effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IEffectMaterial.SpecularPower">
            <summary>
            Gets or sets the specular power of the effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.BasicMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of <c>BasicMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.BasicMaterial.#ctor(Microsoft.Xna.Framework.Graphics.BasicEffect)">
            <summary>
            Initializes a new instance of <c>BasicMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.BasicMaterial.Apply">
            <summary>
            Applys the parameter values to the underlying BasicMaterial.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.BasicMaterial.Clone">
            <summary>
            Clones the parameter values to a new instance of BasicMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.Effect">
            <summary>
            Gets the underlying BasicMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.DiffuseColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.EmissiveColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.LightingEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.PreferPerPixelLighting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.SpecularColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.SpecularPower">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.TextureEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.VertexColorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.IsTransparent">
            <summary>
            Gets or sets whether this material is transparent.
            </summary>
            <remarks>
            Typically this value don't need to be set explicitly, but when the texture or
            vertex color contains transparent alpha channel and that channel represents
            transparency, you can set the value to explicitly turn on alpha blending.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.IsTransparentValue">
            <summary>
            When overriden, returns whether the rendered object is transparent under
            current material settings.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.BasicMaterial.Lights">
            <summary>
            Gets the lights.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.DecalMaterial">
            <summary>
            Effect instance for <c>DecalEffect</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DecalMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of <c>DecalMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DecalMaterial.#ctor(Nine.Graphics.Effects.DecalEffect)">
            <summary>
            Initializes a new instance of <c>DecalMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DecalMaterial.Apply">
            <summary>
            Applys the parameter values to the underlying DecalMaterial.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DecalMaterial.Clone">
            <summary>
            Clones the parameter values to a new instance of DecalMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DecalMaterial.Effect">
            <summary>
            Gets the underlying DecalMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DecalMaterial.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DecalMaterial.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DecalMaterial.TextureTransform">
            <summary>
            
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.DualTextureMaterial">
            <summary>
            Effect instance for <c>DualTextureEffect</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DualTextureMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of <c>DualTextureMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DualTextureMaterial.#ctor(Microsoft.Xna.Framework.Graphics.DualTextureEffect)">
            <summary>
            Initializes a new instance of <c>DualTextureMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DualTextureMaterial.Apply">
            <summary>
            Applys the parameter values to the underlying DualTextureMaterial.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DualTextureMaterial.Clone">
            <summary>
            Clones the parameter values to a new instance of DualTextureMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DualTextureMaterial.Effect">
            <summary>
            Gets the underlying DualTextureMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DualTextureMaterial.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DualTextureMaterial.DiffuseColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DualTextureMaterial.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DualTextureMaterial.Texture2">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DualTextureMaterial.VertexColorEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DualTextureMaterial.IsTransparent">
            <summary>
            Gets whether this material is transparent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.DualTextureMaterial.IsTransparentValue">
            <summary>
            When overriden, returns whether the rendered object is transparent under
            current material settings.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EnvironmentMapMaterial">
            <summary>
            Effect instance for <c>EnvironmentMapEffect</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.EnvironmentMapMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of <c>EnvironmentMapMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.EnvironmentMapMaterial.#ctor(Microsoft.Xna.Framework.Graphics.EnvironmentMapEffect)">
            <summary>
            Initializes a new instance of <c>EnvironmentMapMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.EnvironmentMapMaterial.Apply">
            <summary>
            Applys the parameter values to the underlying EnvironmentMapMaterial.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.EnvironmentMapMaterial.Clone">
            <summary>
            Clones the parameter values to a new instance of EnvironmentMapMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.Effect">
            <summary>
            Gets the underlying EnvironmentMapMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.DiffuseColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.EmissiveColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.EnvironmentMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.EnvironmentMapAmount">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.EnvironmentMapSpecular">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.FresnelFactor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.IsTransparent">
            <summary>
            Gets whether this material is transparent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.IsTransparentValue">
            <summary>
            When overriden, returns whether the rendered object is transparent under
            current material settings.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.EnvironmentMapMaterial.Lights">
            <summary>
            Gets the lights.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.SkinnedMaterial">
            <summary>
            Effect instance for <c>SkinnedEffect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.IEffectSkinned">
            <summary>
            Gets or sets skinning parameters for the current effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.IEffectSkinned.SetBoneTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Sets the bones transforms for the skinned effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.IEffectSkinned.SkinningEnabled">
            <summary>
            Gets or sets if vertex skinning is enabled by this effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.SkinnedMaterial.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of <c>SkinnedMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.SkinnedMaterial.#ctor(Microsoft.Xna.Framework.Graphics.SkinnedEffect)">
            <summary>
            Initializes a new instance of <c>SkinnedMaterial</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.SkinnedMaterial.Apply">
            <summary>
            Applys the parameter values to the underlying SkinnedMaterial.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.SkinnedMaterial.Clone">
            <summary>
            Clones the parameter values to a new instance of SkinnedMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.Effect">
            <summary>
            Gets the underlying SkinnedMaterial.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.Alpha">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.DiffuseColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.EmissiveColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.PreferPerPixelLighting">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.SpecularColor">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.SpecularPower">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.Texture">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.WeightsPerVertex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.IsTransparent">
            <summary>
            Gets whether this material is transparent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.IsTransparentValue">
            <summary>
            When overriden, returns whether the rendered object is transparent under
            current material settings.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.SkinnedMaterial.Lights">
            <summary>
            Gets the lights.
            </summary>
        </member>
        <member name="T:Nine.Animations.AvatarSkeleton">
            <summary>
            Defines the skeleton for avatar.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Skeleton">
            <summary>
            Represents a bone hierarchy that can be animated by <c>BoneAnimation</c>.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Skeleton.HasAnimated">
            <summary>
            Keep track of whether this skeleton has been animated.
            We don't perform blending when a skeleton has just been created.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetParentBone(System.Int32)">
            <summary>
            Gets the index of the parent bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetChildBones(System.Int32)">
            <summary>
            Gets all the child bones of the input bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetChildBones(System.Int32,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Gets all the child bones of the input bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetBoneName(System.Int32)">
            <summary>
            Gets the name of the bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetBone(System.String)">
            <summary>
            Gets the index of the bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetAbsoluteBoneTransform(System.Int32)">
            <summary>
            Gets the aboslute transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetAbsoluteBoneTransform(System.String)">
            <summary>
            Gets the aboslute transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.CopyAbsoluteBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Copies the aboslute transforms of all the bones.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.CopyBoneTransformsTo(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Copies the local transforms of all the bones.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetBoneTransform(System.Int32)">
            <summary>
            Gets the local transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetBoneTransform(System.String)">
            <summary>
            Gets the local transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetSkinTransforms">
            <summary>
            Skin the target model based on the current state of model bone transforms.
            </summary>
            <returns>
            A matrix array used to draw skinned meshes.
            </returns>
            <remarks>
            Whenever the bone or skeleton changes, you should re-skin the model.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetSkinTransforms(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Skin the target model based on the current state of model bone transforms.
            </summary>
            <param name="world">
            A world matrix that will be applied to the result bone transforms.
            </param>
            <returns>
            A matrix array used to draw skinned meshes.
            </returns>
            <remarks>
            Whenever the bone or skeleton changes, you should re-skin the model.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetSkinTransforms(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Skin the target model based on the current state of model bone transforms.
            </summary>
            <param name="skinTransforms">
            A matrix array to hold the result transformations.
            The length must be at least InverseBindPose.Count.
            </param>
        </member>
        <member name="M:Nine.Graphics.Skeleton.GetSkinTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Skin the target model based on the current state of model bone transforms.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.BoneTransforms">
            <summary>
            Gets a fixed sized array of transformation matrices for each bone
            according to its parent bone.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.ParentBones">
            <summary>
            Gets the hierarchical relationship between bones.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.BoneNames">
            <summary>
            Gets a collection of names for each bone.
            Return null if the skeleton does not have a name for each bone.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.SkeletonRoot">
            <summary>
            Gets the index of the root bone of the skeleton.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Skeleton.InverseAbsoluteBindPose">
            <summary>
            Gets a collection of inverse transformation matrices for each bone
            according to the skeleton root bone.
            Return null if the skeleton is not intended for skinned models.
            </summary>
        </member>
        <member name="T:Nine.Animations.AvatarAnimationController">
            <summary>
            Defines a basic avatar animation controller from presets.
            </summary>
        </member>
        <member name="T:Nine.Animations.IBoneAnimationController">
            <summary>
            Represents a controller that manipulates the bone transforms of a model.
            </summary>
        </member>
        <member name="M:Nine.Animations.IBoneAnimationController.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="T:Nine.Animations.AvatarBoneAnimation">
            <summary>
            Provides methods and properties for animating an avatar using custom animations.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimation">
            <summary>
            Represents the animation of a skeleton that can be controlled by
            either the predefined animation clip or by custom controllers.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.#ctor(Nine.Graphics.Skeleton)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.#ctor(Nine.Graphics.Skeleton,Nine.Animations.BoneAnimationClip)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.#ctor(Nine.Graphics.Skeleton,Nine.Animations.IBoneAnimationController)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.OnStarted">
            <summary>
            Plays the animation from start.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.OnStopped">
            <summary>
            Stops the animation.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.OnPaused">
            <summary>
            Pauses the animation.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.OnResumed">
            <summary>
            Resumes the animation.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.Update(System.TimeSpan)">
            <summary>
            Updates the internal state of the object based on game time.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.UpdateBoneTransforms(System.TimeSpan)">
            <summary>
            Updates the bone transforms.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimation.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.Skeleton">
            <summary>
            Gets the skeleton currently animated by this bone animation.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.Controllers">
            <summary>
            Gets all the controllers affecting this BoneAnimation.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.BlendEnabled">
            <summary>
            Gets or sets whether this BoneAnimation should blend with the
            previous bone poses (specified by BlendTarget) when started 
            playing the animation.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.BlendDuration">
            <summary>
            Gets or sets the duration of blend between this BoneAnimation
            and the previous animation specified by BlendTarget.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.KeyController">
            <summary>
            Gets or sets the key animation of this LayeredAnimation.
            A LayeredAnimation ends either when the last contained 
            animation stops or when the specifed KeyAnimation ends.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimation.IsSychronized">
            <summary>
            Gets or sets a value indicating whether all other animations
            should adjust the playing speed to sychronize the pace with 
            the KeyController if a valid one is specified.
            </summary>
        </member>
        <member name="F:Nine.Animations.AvatarBoneAnimation.currentPosition">
            <summary>
            The current temporal position in the animation.
            </summary>
        </member>
        <member name="P:Nine.Animations.AvatarBoneAnimation.Skeleton">
            <summary>
            Gets the skeleton of the avatar.
            </summary>
        </member>
        <member name="P:Nine.Animations.AvatarBoneAnimation.Microsoft#Xna#Framework#GamerServices#IAvatarAnimation#BoneTransforms">
            <summary>
            Gets the current position of the bones at the time specified by CurrentPosition.
            </summary>
        </member>
        <member name="P:Nine.Animations.AvatarBoneAnimation.CurrentPosition">
            <summary>
            The current temporal position in the animation.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimationClip">
            <summary>
            Defines a bone animation clip.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationClip.FramesPerSecond">
            <summary>
            Gets animation frame rate.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationClip.TotalFrames">
            <summary>
            Gets total number of frames.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationClip.PreferredEnding">
            <summary>
            Gets the preferred ending style.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationClip.Transforms">
            <summary>
            Gets all the channels in this animation clip.
            The transform is ordered by bone index then ordered by frame number.
            </summary>
        </member>
        <member name="T:Nine.Animations.WeightedBoneAnimationController">
            <summary>
            Represents a BoneAnimation that has a weight associated with each bone.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.#ctor(Nine.Graphics.Skeleton,Nine.Animations.IBoneAnimationController)">
            <summary>
            Creates a new instance of WeightedBoneAnimationController.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.EnableAll">
            <summary>
            Enables the animation on all bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.DisableAll">
            <summary>
            Disables the animation on all bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.Enable(System.Int32,System.Boolean)">
            <summary>
            Enables the animation on the target and its child bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.Enable(System.String,System.Boolean)">
            <summary>
            Enables the animation on the target and its child bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.Disable(System.Int32,System.Boolean)">
            <summary>
            Disables the animation on the target and its child bones.
            </summary>
        </member>
        <member name="M:Nine.Animations.WeightedBoneAnimationController.Disable(System.String,System.Boolean)">
            <summary>
            Disables the animation on the target and its child bones.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationController.Controller">
            <summary>
            Gets the inner controller used by this <c>WeightedBoneAnimationController</c>.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationController.BlendWeight">
            <summary>
            Gets or sets the weight applied to the final bone transform.
            This parameter has nothing to do with BlendEnabled and BlendDuration.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationController.BoneWeights">
            <summary>
            Gets the collection to manipulated the blend weights of each bone.
            </summary>
        </member>
        <member name="T:Nine.Animations.WeightedBoneAnimationControllerBone">
            <summary>
            Represents a bone that has a blend weight.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationControllerBone.BlendWeight">
            <summary>
            Gets or sets the blend weight of this bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.WeightedBoneAnimationControllerBone.Enabled">
            <summary>
            Gets or sets wether this bone is enabled.
            </summary>
        </member>
        <member name="T:Nine.Animations.WeightedBoneAnimationControllerBoneCollection">
            <summary>
            Represents a collection of weighted bone for BoneAnimation.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimationControllerCollection">
            <summary>
            Represents a collection of controllers for BoneAnimation.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneAnimationController">
            <summary>
            Controls the bone transforms of a model based on predefined skeleton animation tracks.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.#ctor(Nine.Animations.BoneAnimationClip)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimationController"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.#ctor(Nine.Animations.BoneAnimationClip,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneAnimationController"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.Update(System.TimeSpan)">
            <summary>
            Update the animation by a specified amount of elapsed time.
            Handle playing either forwards or backwards.
            Determines whether animation should terminate or continue.
            Signals related events.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.OnSeek(System.Int32,System.Int32,System.Single)">
            <summary>
            Moves the animation at the position between start frame and end frame
            specified by percentage.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneAnimationController.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationController.InterpolationEnabled">
            <summary>
            Gets or sets whether this BoneAnimation should automatically
            perform matrix interpolation when the playing speed is less then 
            current frame rate.
            </summary>
        </member>
        <member name="P:Nine.Animations.BoneAnimationController.AnimationClip">
            <summary>
            Gets the animation clip used by this bone animation.
            </summary>
        </member>
        <member name="T:Nine.Animations.BoneSnapshotController">
            <summary>
            Provides a snapshot of the original bone transforms of a model.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneSnapshotController.#ctor(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.BoneSnapshotController"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.BoneSnapshotController.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="T:Nine.Animations.LookAtController">
            <summary>
            Controls the target bone to make it always look at the specified target.
            </summary>
        </member>
        <member name="M:Nine.Animations.LookAtController.#ctor(Nine.Graphics.Skeleton,Microsoft.Xna.Framework.Matrix,System.Int32)">
            <summary>
            Creates a new LookAtController.
            </summary>
        </member>
        <member name="M:Nine.Animations.LookAtController.Update(System.TimeSpan)">
            <summary>
            Updates the internal state of the object based on game time.
            </summary>
        </member>
        <member name="M:Nine.Animations.LookAtController.TryGetBoneTransform(System.Int32,Microsoft.Xna.Framework.Matrix@,System.Single@)">
            <summary>
            Tries to get the local transform and blend weight of the specified bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Bone">
            <summary>
            Gets or sets the index of the controlled bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Target">
            <summary>
            Gets or sets the target to look at.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Up">
            <summary>
            Gets or sets the up axis.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Forward">
            <summary>
            Gets or sets the forward axis.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Transform">
            <summary>
            Gets or sets the base world transform of the parent BoneAnimation.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.HorizontalRotation">
            <summary>
            Gets or sets the range of horizontal rotation of the controlled bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.VerticalRotation">
            <summary>
            Gets or sets the range of vertical rotation of the controlled bone.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.RotationSpeed">
            <summary>
            Gets or sets the max rotation speed.
            </summary>
        </member>
        <member name="P:Nine.Animations.LookAtController.Skeleton">
            <summary>
            Gets the parent animation that this controller is affecting.
            </summary>
        </member>
        <member name="T:Nine.Animations.SpriteAnimation">
            <summary>
            An animation player that plays TextureList based sprite animations.
            </summary>
        </member>
        <member name="M:Nine.Animations.SpriteAnimation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.SpriteAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.SpriteAnimation.#ctor(System.Collections.Generic.IEnumerable{Microsoft.Xna.Framework.Graphics.Texture2D})">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.SpriteAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.SpriteAnimation.#ctor(Nine.Graphics.TextureList)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.SpriteAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.SpriteAnimation.#ctor(Nine.Graphics.TextureList,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Animations.SpriteAnimation"/> class.
            </summary>
        </member>
        <member name="M:Nine.Animations.SpriteAnimation.OnSeek(System.Int32,System.Int32,System.Single)">
            <summary>
            Moves the animation at the position between start frame and end frame
            specified by percentage.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.TextureList">
            <summary>
            Gets or sets the texture list used by this <see cref="T:Nine.Animations.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.Texture">
            <summary>
            Gets the texture for this <see cref="T:Nine.Animations.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.SourceRectangle">
            <summary>
            Gets the current source rectangle.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.Target">
            <summary>
            Gets or sets the target that this sprite animation should affect.
            </summary>
        </member>
        <member name="P:Nine.Animations.SpriteAnimation.TargetProperty">
            <summary>
            Gets or sets the target property that this sprite animation should affect.
            The property must be of type <see cref="T:Nine.Graphics.TextureListItem"/>.
            </summary>
        </member>
        <member name="T:Nine.Components.FrameRate">
            <summary>
            Frame rate profiler
            </summary>
        </member>
        <member name="M:Nine.Components.FrameRate.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Graphics.SpriteFont)">
            <summary>
            The main constructor for the class.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Visible">
            <summary>
            Gets a value indicating whether this <see cref="T:Nine.Components.FrameRate"/> is visible.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.UpdateFrequency">
            <summary>
            Time needed to calculate FPS.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Font">
            <summary>
            Gets or sets the sprite font used to draw FPS string
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Color">
            <summary>
            Gets or sets the color used to draw FPS string
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Position">
            <summary>
            Gets or set the frame rate position on the screen
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.CurrentFrame">
            <summary>
            Gets the total number of frames since profiler started
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.OverallFramesPerSecond">
            <summary>
            Gets the average frame rate up until now
            </summary>
        </member>
        <member name="P:Nine.Components.FrameRate.FramesPerSecond">
            <summary>
            Gets the current Frame Per Second for the game
            </summary>
        </member>
        <member name="T:Nine.Components.GameConsoleEventArgs">
            <summary>
            Event args used by GameConsole.
            </summary>
        </member>
        <member name="T:Nine.Components.GameConsoleCommandCollection">
            <summary>
            Command collection used by game console.
            </summary>
        </member>
        <member name="T:Nine.Components.GameConsole">
            <summary>
            In game console
            </summary>
        </member>
        <member name="P:Nine.Components.GameConsole.Text">
            <summary>
            Gets or sets current console text
            </summary>
        </member>
        <member name="T:Nine.Components.ScreenshotCapturedEventArgs">
            <summary>
            EventArgs used by ScreenshotCapturer.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturedEventArgs.Screenshot">
            <summary>
            The captured screenshot texture.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturedEventArgs.Filename">
            <summary>
            The filename of the saved screenshot.
            </summary>
        </member>
        <member name="T:Nine.Components.ScreenshotCapturer">
            <summary>
            Screenshot capturer component that captures screenshots.
            </summary>
        </member>
        <member name="F:Nine.Components.ScreenshotCapturer.screenshotNum">
            <summary>
            Internal screenshot number (will increase by one each screenshot)
            </summary>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new instance of ScreenshotCapturer.
            </summary>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.ScreenshotNameBuilder(System.Int32)">
            <summary>
            Screenshot name builder
            </summary>
            <param name="num">Num</param>
            <returns>String</returns>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.GetCurrentScreenshotNum">
            <summary>
            Get current screenshot num
            </summary>
            <returns>Int</returns>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.Capture">
            <summary>
            Takes a new Screenshot of the current backbuffer.
            </summary>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.CaptureAndSave">
            <summary>
            Takes a new Screenshot of the current backbuffer and save it to local storage.
            </summary>
        </member>
        <member name="M:Nine.Components.ScreenshotCapturer.OnCaptured(Nine.Components.ScreenshotCapturedEventArgs)">
            <summary>
            Raised when a new screenshot is taken.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturer.ScreenshotsDirectory">
            <summary>
            Gets or sets the directory where the screenshot files will be stored.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturer.CaptureKey">
            <summary>
            Gets or sets the key used to capture a screenshot.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturer.CaptureButton">
            <summary>
            Gets or sets the gamepad button used to capture a screenshot.
            </summary>
        </member>
        <member name="P:Nine.Components.ScreenshotCapturer.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="E:Nine.Components.ScreenshotCapturer.Captured">
            <summary>
            Occurs when a new screenshot is captured.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.AmbientLightEffect.#ctor(Nine.Graphics.Effects.AmbientLightEffect)">
            <summary>
            Creates a new AmbientLightEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.AmbientLightEffect.Clone">
            <summary>
            Creates a clone of the current AmbientLightEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.CustomEffect">
            <summary>
            Enables automatic custom effect parameter binding using DirectX Standard Annotation and Semantic.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.CustomMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Effects.CustomMaterial"/> class for serialization.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.CustomMaterial.#ctor(Nine.Graphics.Effects.CustomEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Effects.CustomMaterial"/> class.
            </summary>
            <param name="effect">The effect.</param>
        </member>
        <member name="P:Nine.Graphics.Effects.CustomMaterial.IsTransparent">
            <summary>
            Gets or sets whether this material is transparent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.CustomMaterial.IsTransparentValue">
            <summary>
            When overriden, returns whether the rendered object is transparent under
            current material settings.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.CustomMaterial.Parameters">
            <summary>
            Gets the parameters unique to this custom material instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectAnnotations">
            <summary>
            Defines a list of effect parameter semantics supported by the rendering system.
            </summary>
            <remarks>
            Prefix the enum value with "Sas", "SasEffect" or "SasUi" is also supported.
            </remarks>
        </member>
        <member name="T:Nine.Graphics.Effects.LinkedEffectPart">
            <summary>
            Represents a basic effect fragment that makes up an LinkedEffect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedEffectPart.GetParameter(System.String)">
            <summary>
            Gets the EffectParameter with the name from the fragment parameter name.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedEffectPart.GetParameterBySemantic(System.String)">
            <summary>
            Gets the EffectParameter by semantic from the fragment parameter name.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedEffectPart.OnApply">
            <summary>
            Applies the effect state just prior to rendering the effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedEffectPart.OnApply(Nine.Graphics.Effects.LinkedEffectPart)">
            <summary>
            Applies the effect state to another instance of effect part of the same type.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedEffectPart.Clone">
            <summary>
            Copies data from an existing object to this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffectPart.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffectPart.IsMaterial">
            <summary>
            Gets a value indicating whether this LinkedEffectPart shall be copied to the
            LinkedMaterial.
            If this value is true, you must override OnApply(LinkedEffectPart part) to 
            push all the parameters to the target part.
            The default value is false.
            </summary>
            
            TODO: Pick a better name?
        </member>
        <member name="T:Nine.Graphics.Effects.EffectSemantics">
            <summary>
            Defines a list of effect parameter annotation supported by the rendering system.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.LeveledMaterial">
            <summary>
            Defines a material with level of details.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LeveledMaterial.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Effects.LeveledMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LeveledMaterial.#ctor(System.Collections.Generic.IEnumerable{Nine.Graphics.Effects.Material})">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Effects.LeveledMaterial"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LeveledMaterial.UpdateLevelOfDetail(System.Single)">
            <summary>
            Manually updates the level of detail of this leveled material.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LeveledMaterial.Apply">
            <summary>
            Applys the parameter values to the underlying effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LeveledMaterial.Find``1">
            <summary>
            Queries the material for the specified interface T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LeveledMaterial.Clone">
            <summary>
            Clones this instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LeveledMaterial.OnMaterialChanged(Nine.Graphics.Effects.Material)">
            <summary>
            Called when a new material level is used.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LeveledMaterial.CurrentMaterial">
            <summary>
            Gets the current material level.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LeveledMaterial.MaterialLevels">
            <summary>
            Gets a list of materials that are sorted from lowest quanlity to highest quanlity.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LeveledMaterial.LevelOfDetailStart">
            <summary>
            Gets or sets the distance at which to use the highest quanlity material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LeveledMaterial.LevelOfDetailEnd">
            <summary>
            Gets or sets the distance at which to use the lowest quanlity material.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LeveledMaterial.MaterialQuality">
            <summary>
            Gets or sets the overall material quality that is multiplied with the quanlity
            determined by LevelOfDetailStart and LevelOfDetailEnd.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LeveledMaterial.Effect">
            <summary>
            Gets the underlying effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LeveledMaterial.GraphicsBufferEffect">
            <summary>
            Gets the deferred effect used to generate the graphics buffer.
            If null is returned, the default graphics buffer effect is used.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LeveledMaterial.IsDeferred">
            <summary>
            Gets a value indicating whether this material uses deferred lighting.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LeveledMaterial.IsTransparentValue">
            <summary>
            When overriden, returns whether the rendered object is transparent under
            current material settings.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.LinkedMaterial">
            <summary>
            Defines a material for linked effects.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedMaterial.#ctor">
            <summary>
            For content serialization.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedMaterial.Find``1">
            <summary>
            Queries the material for the specified interface T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedMaterial.FindAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds all the accurances of LinkedEffectPart that is of type T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedMaterial.SetTexture(Nine.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets the texture with the specified texture usage.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.IsTransparent">
            <summary>
            Gets or sets whether this material is transparent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.IsTransparentValue">
            <summary>
            When overriden, returns whether the rendered object is transparent under
            current material settings.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.Effect">
            <summary>
            Gets the underlying effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.GraphicsBufferEffect">
            <summary>
            Gets the deferred effect used to generate the graphics buffer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.EffectParts">
            <summary>
            Gets or sets the effect parts.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.Texture">
            <summary>
            Gets or sets the primiary diffuse texture of the current effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.DiffuseColor">
            <summary>
            Gets or sets the diffuse color of the effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.EmissiveColor">
            <summary>
            Gets or sets the emissive color of the effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.SpecularColor">
            <summary>
            Gets or sets the specular color of the effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.SpecularPower">
            <summary>
            Gets or sets the specular power of the effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedMaterial.Alpha">
            <summary>
            Gets or sets the opaque of the effect.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.ShadowEffect">
            <summary>
            Defines a shadow effect that can be used to draw multi-pass shadows.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.IEffectShadowMap">
            <summary>
            Defines an interface for effects that supports shadow mapping.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.IEffectShadowMap.DepthBias">
            <summary>
            Gets or sets a small depth bias value that is added to the shadow map depth
            when comparing the object depth with depth in the shadow map.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.IEffectShadowMap.ShadowColor">
            <summary>
            Gets or sets the color of the shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.IEffectShadowMap.LightViewProjection">
            <summary>
            Gets or sets the view projection matrix of the light that casts the shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.IEffectShadowMap.ShadowMap">
            <summary>
            Gets or sets the shadow map texture that holds the depth values in x(r) channel.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.ShadowEffect.#ctor(Nine.Graphics.Effects.ShadowEffect)">
            <summary>
            Creates a new ShadowEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.ShadowEffect.Clone">
            <summary>
            Creates a clone of the current ShadowEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.GraphicsComponent">
            <summary>
            Defines a graphics component that can be added to a game object container.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsComponent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.GraphicsComponent"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsComponent.OnAdded(Nine.WorldObject)">
            <summary>
            Called when this game object is added to a parent container.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsComponent.OnRemoved(Nine.WorldObject)">
            <summary>
            Called when this game object is removed from a parent container.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsComponent.CreateGraphicsObject">
            <summary>
            Creates the graphics object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.GraphicsComponent.DestroyGraphicsObject">
            <summary>
            Destroys the graphics object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.GraphicsComponent.Template">
            <summary>
            Gets or sets the view template of this graphics component.
            </summary>
        </member>
        <member name="P:Nine.Graphics.GraphicsComponent.Transform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="P:Nine.Graphics.GraphicsComponent.DisplayObject">
            <summary>
            Gets the graphics object owned by this graphics component.
            </summary>
        </member>
        <member name="P:Nine.Graphics.GraphicsComponent.Scene">
            <summary>
            Gets the scene that contains the graphics object owned by this graphics component.
            </summary>
        </member>
        <member name="T:Nine.Graphics.GraphicsExtensions">
            <summary>
            Contains extension methods related to graphics.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ViewportExtensions">
            <summary>
            Contains extension method for Viewport.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.CreatePickRay(Microsoft.Xna.Framework.Graphics.Viewport,System.Int32,System.Int32,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a picking ray from screen position.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.CreatePickFrustum(Microsoft.Xna.Framework.Graphics.Viewport,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a picking frustum from screen rectangle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.CreatePickFrustum(Microsoft.Xna.Framework.Graphics.Viewport,Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Creates a picking frustum from screen rectangle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.TryPick(Nine.IPickable,Microsoft.Xna.Framework.Graphics.Viewport,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the picked position in world space from current mouse coordinates.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ViewportExtensions.TryPick(Nine.IPickable,Microsoft.Xna.Framework.Graphics.Viewport,System.Int32,System.Int32,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the picked position in world space from screen coordinates.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.Light`1">
            <summary>
            Base class for all lights.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.Light">
            <summary>
            Defines a base class for a light used by the render system.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.Transformable">
            <summary>
            Base class for all objects that has a transform and a bounds.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.IContainer">
            <summary>
            Defines a generic object container.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.IContainer.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies all the child objects to the target array.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.IContainer.Count">
            <summary>
            Gets the number of child objects
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.IContainedObject">
            <summary>
            Defines an object that can be contained by a parent container.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.IContainedObject.Parent">
            <summary>
            Gets the parent container.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Transformable.OnTransformChanged">
            <summary>
            Called when local or absolute transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Transformable.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies all the child objects to the target array.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Transformable.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Transformable.Parent">
            <summary>
            Gets the parent of this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Transformable.Name">
            <summary>
            Gets or sets the name of this transformable.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Transformable.Tag">
            <summary>
            Gets or sets any custom data.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Transformable.Transform">
            <summary>
            Gets or sets the transform of this object.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ObjectModel.Transformable.TransformChanged">
            <summary>
            Occurs when transform changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Transformable.AbsoluteTransform">
            <summary>
            Gets the absolute transform of this drawable.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Transformable.ChildCount">
            <summary>
            Gets the number of child objects
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.Light.AffectedDrawables">
            <summary>
            Used by the rendering system to keep track of drawables affect by this light.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Light.#ctor">
            <summary>
            For now we don't allow custom light types.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Light.FindAll(Nine.Graphics.ObjectModel.Scene,System.Collections.Generic.List{Nine.Graphics.ObjectModel.IDrawableObject},System.Collections.Generic.ICollection{Nine.Graphics.ObjectModel.IDrawableObject})">
            <summary>
            Finds all the objects affected by this light.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Light.Apply(Nine.Graphics.Effects.Material,System.Int32,System.Boolean)">
            <summary>
            TODO:
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Light.DrawShadowMap(Nine.Graphics.ObjectModel.GraphicsContext,Nine.Graphics.ObjectModel.Scene,Nine.HashSet{Nine.ISpatialQueryable},Nine.HashSet{Nine.ISpatialQueryable})">
            <summary>
            Draws the depth map of the specified drawables.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Light.GetShadowFrustum(Nine.Graphics.ObjectModel.GraphicsContext,Nine.HashSet{Nine.ISpatialQueryable},Nine.HashSet{Nine.ISpatialQueryable},Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Gets the shadow frustum of this light.
            </summary>
            <returns>
            Returns true when a shadow caster is found.
            </returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Light.DrawFrustum(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Draws the light frustum using Settings.Debug.LightFrustumColor.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Light.Enabled">
            <summary>
            Gets whether the light is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Light.CastShadow">
            <summary>
            Gets or sets whether the light should cast a shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Light.Order">
            <summary>
            Gets the order of this light when it's been process by the renderer.
            Light might be discarded when the max affecting lights are reached.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Light.MultiPassEffect">
            <summary>
            Gets the multi-pass lighting effect used to draw object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Light.ShadowFrustum">
            <summary>
            Gets the shadow frustum of this light.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.Deferred.IDeferredLight">
            <summary>
            Defines a light used by deferred rendering.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.IDeferredLight.Effect">
            <summary>
            Gets the effect used to draw the light geometry.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.IDeferredLight.VertexBuffer">
            <summary>
            Gets the vertex buffer of the light geometry.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.IDeferredLight.IndexBuffer">
            <summary>
            Gets the index buffer of the light geometry.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.Camera">
            <summary>
            Defines a camera that can be attacked to a <see cref="T:Nine.Graphics.ObjectModel.Transformable"/>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ICamera">
            <summary>
            Interface for game camera
            </summary>
        </member>
        <member name="P:Nine.Graphics.ICamera.Viewport">
            <summary>
            Gets the optional viewport of this cameara.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ICamera.View">
            <summary>
            Gets the camera view matrix
            </summary>
        </member>
        <member name="P:Nine.Graphics.ICamera.Projection">
            <summary>
            Gets the camera projection matrix
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Camera.OnTransformChanged">
            <summary>
            Called when local or absolute transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Camera.UpdateProjectionMatrix">
            <summary>
            Performs update of ProjectionMatrix.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Camera.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.Camera"/> class.
            You have to explicitly set the viewport property if no graphics device is specified.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Camera.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.Camera"/> class.
            If a valid graphics device is specified, the camera will automatically adjust 
            its aspect ratio based on the default viewport settings of the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Camera.View">
            <summary>
            Gets the camera view matrix
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Camera.NearPlane">
            <summary>
            Gets or sets the distance to the camera near clip plane.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Camera.FarPlane">
            <summary>
            Gets or sets the distance to the camera far clip plane.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Camera.AspectRatio">
            <summary>
            Gets or sets camera aspect ratio.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Camera.FieldOfView">
            <summary>
            Gets or sets camera field of view in radians.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Camera.Projection">
            <summary>
            Gets the camera projection matrix
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Camera.Viewport">
            <summary>
            Gets or sets the viewport of this camera.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Camera.Enabled">
            <summary>
            Gets a value indicating whether this <see cref="T:Nine.Graphics.ObjectModel.Camera"/> is enabled.
            </summary>
            <value>
              <c>true</c> if enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Camera.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.ContainerTraverser.FindRootContainer(System.Object)">
            <summary>
            Finds the root of the target object in the scene tree.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.ContainerTraverser.FindParentContainer``1(System.Object)">
            <summary>
            Traverse up the scene tree and returns the first parent of type T.
            Returns the target object if it is already an instance of T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.ContainerTraverser.Traverse``1(System.Object,System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds all the child objects of the target.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.ContainerTraverser.Traverse``1(System.Object,System.Func{``0,Nine.TraverseOptions})">
            <summary>
            Finds all the child objects of the target.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.Decal">
            <summary>
            Defines a textured decal that can be projected to the triangle surfaces of the scene.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.IDrawableObject">
            <summary>
            Represents a drawable object that can be rendered using the renderer.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.IDrawableObject.BeginDraw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Perform any updates before this object is drawed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.IDrawableObject.Draw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Draws the object using the graphics context.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.IDrawableObject.Draw(Nine.Graphics.ObjectModel.GraphicsContext,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Draws the object with the specified effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.IDrawableObject.EndDraw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Perform any updates after this object is drawed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.IDrawableObject.Visible">
            <summary>
            Gets whether this object is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.IDrawableObject.Material">
            <summary>
            Gets the material of the object.
            A value of null indicates the object does not have any materials
            for external use.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Decal.OnBoundingBoxChanged">
            <summary>
            Called when the bounding box changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Decal.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.Decal"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Decal.Draw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Draws the object using the graphics context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Decal.UpdateDecalGeometry">
            <summary>
            Forces an update to the geometry used to render the decal.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Decal.ComputeNormals(Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture[],System.UInt16[],System.Int32,System.Int32)">
            <summary>
            Computes the normal for each vertex of the input primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Decal.Dispose">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Decal.Dispose(System.Boolean)">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.Visible">
            <summary>
            Gets whether this object is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.Alpha">
            <summary>
            Gets or sets the opaque of this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.Color">
            <summary>
            Gets or sets the color of this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.Size">
            <summary>
            Gets or sets the size of this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.Material">
            <summary>
            Gets the material of the object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.DepthBias">
            <summary>
            Gets or sets a small offset value that is used as the depth bias to eliminate depth fighting.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.LightingEnabled">
            <summary>
            Gets or sets a value indicating whether lighting is enabled for this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.NormalMappingEnabled">
            <summary>
            Gets or sets a value indicating whether normal mapping is enabled for this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.Texture">
            <summary>
            Gets or sets the decal texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.NormalMap">
            <summary>
            Gets or sets an optional normal map for the decal texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.Duration">
            <summary>
            Gets or sets the duration of this decal or null if the decal is persistent.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.FadeDuration">
            <summary>
            Gets or sets the duration for this decal to fade out.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.DecalGeometries">
            <summary>
            Gets a list of geometries that projects this decal.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.BoundingBox">
            <summary>
            Gets the axis aligned bounding box in world space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.OrientedBoundingBox">
            <summary>
            Gets the oriented bounding box of this decal in local space.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ObjectModel.Decal.BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Decal.Nine#ISpatialQueryable#SpatialData">
            <summary>
            Gets or sets the data used for spatial query.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableModel">
            <summary>
            Defines a basic model that can be rendered using the renderer with custom effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModel.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies all the child objects to the target array.
            </summary>
            <param name="array"></param>
            <param name="startIndex"></param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModel.OnTransformChanged">
            <summary>
            Called when transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModel.#ctor(Microsoft.Xna.Framework.Graphics.Model,Nine.Graphics.Effects.Material)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.DrawableModel"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModel.#ctor(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.DrawableModel"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModel.Update(System.TimeSpan)">
            <summary>
            Updates the internal state of the object based on game time.
            </summary>
            <param name="elapsedTime"></param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModel.Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets wether the object contains the given point.
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModel.Intersects(Microsoft.Xna.Framework.Ray)">
            <summary>
            Gets the nearest intersection point from the specifed picking ray.
            </summary>
            <param name="ray"></param>
            <returns>
            Distance to the start of the ray.
            </returns>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.GraphicsDevice">
            <summary>
            Gets the underlying GraphicsDevice.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.Model">
            <summary>
            Gets or sets the underlying model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.Material">
            <summary>
            Gets or sets the material used to draw the model.
            </summary>
            <remarks>
            Setting the material of the model will override any existing materials of the <c>ModelPart</c>
            owned by this <c>Model</c> except for texture settings.
            To specify material for each individual model part, see <c>ModelPart.Material</c>.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.OverrideModelTextures">
            <summary>
            Gets or sets whether the specified material will override
            the default model diffuse texture, normal map, diffuse map, etc.
            The default behavior is not override.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.OverrideModelMaterial">
            <summary>
            Gets or sets whether the specified material will override
            the default model alpha, diffuse, specular, emissive color and specular
            power settings.
            The default behavior is to override.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.Alpha">
            <summary>
            Gets or sets the alpha of this model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.DiffuseColor">
            <summary>
            Gets or sets the diffuse color of this model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.ObjectModel.DrawableModel"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.LightingEnabled">
            <summary>
            Gets or sets a value indicating whether lighting is enabled.
            </summary>
            <value>
              <c>true</c> if lighting is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.MultiPassLightingEnabled">
            <summary>
            Gets or sets a value indicating whether multi-pass lighting is enabled.
            </summary>
            <value>
            	<c>true</c> if multi-pass lighting is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.MaxAffectingLights">
            <summary>
            Gets or sets the max affecting lights.
            </summary>
            <value>
            The max affecting lights.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.CastShadow">
            <summary>
            Gets or sets a value indicating whether this model casts shadow.
            </summary>
            <value>
              <c>true</c> if this model casts shadow; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.ReceiveShadow">
            <summary>
            Gets or sets a value indicating whether this model casts shadow.
            </summary>
            <value>
              <c>true</c> if this model casts shadow; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.MaxReceivedShadows">
            <summary>
            Gets or sets the max received shadows.
            </summary>
            <value>
            The max received shadows.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.MultiPassShadowEnabled">
            <summary>
            Gets or sets a value indicating whether multi-pass shadowing is enabled.
            </summary>
            <value>
            	<c>true</c> if multi-pass shadowing is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.ModelParts">
            <summary>
            Gets the model parts that made up of this model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.ChildCount">
            <summary>
            Gets the number of child objects
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.BoundingBox">
            <summary>
            Gets the axis aligned bounding box in world space.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.OrientedBoundingBox">
            <summary>
            Gets the oriented bounding box.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ObjectModel.DrawableModel.BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.Animations">
            <summary>
            Gets the animations.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.Skeleton">
            <summary>
            Gets the skeleton of this model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.SharedSkeleton">
            <summary>
            Gets or sets the shared skeleton.
            When a valid shared skeleton is set, the model will be rendered using this shared skeleton.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.IsSkinned">
            <summary>
            Gets a value indicating whether this instance is skinned.
            </summary>
            <value>
            	<c>true</c> if this instance is skinned; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModel.IsAnimated">
            <summary>
            Gets a value indicating whether this instance is animated.
            </summary>
            <value>
            	<c>true</c> if this instance is animated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableModelPart">
            <summary>
            Defines a part of a model that contains only one material.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.ILightable">
            <summary>
            Defines an interface for objects that receives lights and shadows.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.ILightable.LightingEnabled">
            <summary>
            Gets whether lighting is enabled on this drawable.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.ILightable.MultiPassLightingEnabled">
            <summary>
            Gets whether the lighting system should draw multi-pass lighting
            overlays on to this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.ILightable.MaxAffectingLights">
            <summary>
            Gets the max number of affecting lights.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.ILightable.CastShadow">
            <summary>
            Gets whether the drawable casts shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.ILightable.ReceiveShadow">
            <summary>
            Gets whether the drawable receives shadow.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.ILightable.MultiPassShadowEnabled">
            <summary>
            Gets whether the lighting system should draw multi-pass shadow
            overlays on to this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.ILightable.MaxReceivedShadows">
            <summary>
            Gets the max number of received shadows.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.ILightable.LightingData">
            <summary>
            Gets or sets the data used by the lighting and shadowing system.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.DrawableModelPart.ModelMesh">
            <summary>
            Gets the model mesh part.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.DrawableModelPart.ModelMeshPart">
            <summary>
            Gets the model mesh part.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModelPart.#ctor">
            <summary>
            For content serializer.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModelPart.#ctor(Nine.Graphics.ObjectModel.DrawableModel,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart,Nine.Graphics.Effects.Material)">
            <summary>
            ModelPart should only be created by Model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModelPart.Draw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Draws the object using the graphics context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableModelPart.Draw(Nine.Graphics.ObjectModel.GraphicsContext,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Draws the object with the specified effect.
            </summary>
            <param name="context"></param>
            <param name="effect"></param>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModelPart.Name">
            <summary>
            Gets the name of this model part.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModelPart.Model">
            <summary>
            Gets the containing model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModelPart.Visible">
            <summary>
            Gets or sets the visibility of this model part.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModelPart.Nine#Graphics#ObjectModel#IDrawableObject#Visible">
            <summary>
            Visibility can be controlled by both ModelPart and Model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModelPart.Material">
            <summary>
            Gets or sets the material of this model part.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableModelPart.Tag">
            <summary>
            Gets or sets any user data.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableParticleEffect">
            <summary>
            Defines an instance of particle effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableParticleEffect.OnTransformChanged">
            <summary>
            Called when local or absolute transform changed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableParticleEffect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.DrawableParticleEffect"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableParticleEffect.#ctor(Nine.Graphics.ParticleEffects.ParticleEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.DrawableParticleEffect"/> class.
            </summary>
            <param name="particleEffect">The particle effect.</param>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableParticleEffect.ParticleEffect">
            <summary>
            Gets the underlying particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableParticleEffect.ParticleEmitter">
            <summary>
            Gets the current particle emitter.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableParticleEffect.Position">
            <summary>
            Gets or sets the position.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableParticleEffect.AbsolutePosition">
            <summary>
            Gets the absolute position.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableParticleEffect.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.ObjectModel.DrawableParticleEffect"/> is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableParticleEffect.BoundingBox">
            <summary>
            Gets the axis aligned bounding box in world space.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ObjectModel.DrawableParticleEffect.BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableSurface">
            <summary>
            A triangle mesh constructed from heightmap to represent game surface. 
            The up axis of the surface is Vector.UnitY.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.DrawableSurface.Grid">
            <summary>
            Gets the underlying uniform grid.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            For content serialization only.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Surface.
            The default vertex format is VertexPositionColorNormalTexture.
            </summary>
            <param name="graphics">Graphics device.</param>
            <param name="step">Size of the smallest square block that made up the surface.</param>
            <param name="segmentCountX">Number of the smallest square block in X axis, or heightmap texture U axis.</param>
            <param name="segmentCountY">Number of the smallest square block in Y axis, or heightmap texture V axis.</param>
            <param name="patchSegmentCount">Number of the smallest square block that made up the surface patch.</param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.Heightmap)">
            <summary>
            Creates a new instance of Surface.
            The default vertex format is VertexPositionColorNormalTexture.
            </summary>
            <param name="graphics">Graphics device.</param>
            <param name="heightmap">The heightmap geometry to create from.</param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.Heightmap,System.Int32)">
            <summary>
            Creates a new instance of Surface.
            The default vertex format is VertexPositionColorNormalTexture.
            </summary>
            <param name="graphics">Graphics device.</param>
            <param name="heightmap">The heightmap geometry to create from.</param>
            <param name="patchSegmentCount">Number of the smallest square block that made up the surface patch.</param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.Heightmap,System.Int32,System.Type)">
            <summary>
            Creates a new instance of Surface.
            The default vertex format is VertexPositionColorNormalTexture.
            </summary>
            <param name="graphics">Graphics device.</param>
            <param name="heightmap">The heightmap geometry to create from.</param>
            <param name="patchSegmentCount">Number of the smallest square block that made up the surface patch.</param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.ConvertVertexType``1(Nine.Graphics.ObjectModel.DrawableSurfaceVertexConverter{``0})">
            <summary>
            Converts and fills the surface vertex buffer to another vertex full.
            The default vertex format is VertexPositionColorNormalTexture.
            This method must be called immediately after the surface is created.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.Invalidate">
            <summary>
            TODO: Passes dirty rectangle during heightmap invalidation.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.PopulateVertex(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture@,Microsoft.Xna.Framework.Graphics.VertexPositionNormalTexture@)">
            <summary>
            Populates a single vertex using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.UpdateLevelOfDetail(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Manually updates the level of detail of each surface patch.
            </summary>
            <param name="eyePosition">The eye position.</param>
            <remarks>
            If you are draw the surface using scene, level of details are automatically updated.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.GetHeight(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.GetHeight(System.Single,System.Single)">
            <summary>
            Gets the height.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.GetNormal(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets the normal.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.GetNormal(System.Single,System.Single)">
            <summary>
            Gets the normal.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.TryGetHeightAndNormal(Microsoft.Xna.Framework.Vector3,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the height and normal of the surface at a given location.
            </summary>
            <returns>False if the location is outside the boundary of the surface.</returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.TryGetHeightAndNormal(System.Single,System.Single,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the height and normal of the surface at a given location.
            </summary>
            <returns>False if the location is outside the boundary of the surface.</returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.TryGetHeight(System.Single,System.Single,System.Single@)">
            <summary>
            Gets the height of the surface at a given location.
            </summary>
            <returns>False if the location is outside the boundary of the surface.</returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.IsAbove(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines whether the specified point is above this surface.
            </summary>
            <param name="point">The point.</param>
            <returns>
              <c>true</c> if the specified point is above; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.Nine#IPickable#Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Points under the heightmap and are within the boundary are picked.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.Intersects(Microsoft.Xna.Framework.Ray)">
            <summary>
            Checks whether a ray intersects the surface mesh.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.Nine#Graphics#ObjectModel#IDrawableObject#BeginDraw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            We only want to hook to the pre draw event to update level of detail.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurface.Dispose">
            <summary>
            Disposes any resources associated with this instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.GraphicsDevice">
            <summary>
            Gets the underlying GraphicsDevice.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.Patches">
            <summary>
            Gets the patches that made up this surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.PatchSegmentCount">
            <summary>
            Gets the number of segments of each patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.PatchCountX">
            <summary>
            Gets the count of patches along the x axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.PatchCountY">
            <summary>
            Gets the count of patches along the y axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.SegmentCountX">
            <summary>
            Gets the number of the smallest square block in X axis, or heightmap texture U axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.SegmentCountY">
            <summary>
            Gets the number of the smallest square block in Y axis, or heightmap texture V axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.Size">
            <summary>
            Gets the size of the surface geometry in 3 axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.Step">
            <summary>
            Gets the size of the smallest square block that made up the terrain.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.TextureTransform">
            <summary>
            Gets or sets the transform matrix for vertex uv coordinates.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.Heightmap">
            <summary>
            Gets the underlying heightmap that contains height, normal, tangent data.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.VertexType">
            <summary>
            Gets the current vertex type used by this surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.MaxLevelOfDetail">
            <summary>
            Gets the max level of detail of this surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.LevelOfDetailStart">
            <summary>
            Gets or sets the distance at which the surface starts to switch to a lower resolution geometry.
            </summary>
            <value>
            The level of detail start.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.LevelOfDetailEnd">
            <summary>
            Gets or sets the distance at which the surface has switched to the lowest resolution geometry.
            </summary>
            <value>
            The level of detail end.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.LevelOfDetailEnabled">
            <summary>
            Gets or sets a value indicating whether level of detail is enabled.
            </summary>
            <value>
            	<c>true</c> if level of detail is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.Visible">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.ObjectModel.DrawableSurface"/> is visible.
            </summary>
            <value>
              <c>true</c> if visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.Material">
            <summary>
            Gets or sets the material of this drawable surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.LightingEnabled">
            <summary>
            Gets or sets a value indicating whether lighting is enabled.
            </summary>
            <value>
              <c>true</c> if lighting is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.CastShadow">
            <summary>
            Gets or sets a value indicating whether this model casts shadow.
            </summary>
            <value>
              <c>true</c> if this model casts shadow; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.ReceiveShadow">
            <summary>
            Gets or sets a value indicating whether this model casts shadow.
            </summary>
            <value>
              <c>true</c> if this model casts shadow; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.Position">
            <summary>
            Gets or sets the local bottom left position of the surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.AbsolutePosition">
            <summary>
            Gets the absolute bottom left position of the surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.Center">
            <summary>
            Gets the local center position of the surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.AbsoluteCenter">
            <summary>
            Gets the absolute center position of the surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.BoundingBox">
            <summary>
            Gets the axis aligned bounding box of this surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurface.Geometry">
            <summary>
            Gets the underlying geometry.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableSurfaceVertexConverter`1">
            <summary>
            Fills a vertex data in a drawable surface.
            </summary>
            <typeparam name="T">The target vertex type.</typeparam>
            <param name="x">The x index of the vertex on the target patch, ranged from 0 to PatchSegmentCount inclusive.</param>
            <param name="y">The y index of the vertex on the target patch, ranged from 0 to PatchSegmentCount inclusive.</param>
            <param name="xPatch">The x index of the target patch.</param>
            <param name="yPatch">The y index of the target patch.</param>
            <param name="input">The input vertex contains the default position, normal and texture coordinates for the target vertex.</param>
            <param name="output">The output vertex to be set.</param>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableSurfacePatchCollection">
            <summary>
            A collection of all the pathes in a Surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatchCollection.Item(System.Int32,System.Int32)">
            <summary>
            Gets the patch for the specified index.
            </summary>
            <returns>
            Returns null if the input is outside the bounds.
            </returns>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry">
            <summary>
            Represents a terrain level of detail technique using GeoMipMapping.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry"/> class.
            </summary>
            <param name="graphics">The graphics.</param>
            <param name="patchSegmentCount">The patch segment count.</param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.GetInstance(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Gets a static instance of SurfaceGeometry.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.EnableLevelOfDetail">
            <summary>
            Enables the level of detail. By default it is not enabled.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.GetLevel(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Gets the level of detail.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.GetLevel(System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int32@,System.Int32@)">
            <summary>
            Gets the level of detail.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.GetIndicesForLevel(System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.UInt16[],System.Int32)">
            <summary>
            Gets the indices for the specified detail level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.GetTriangles(System.Int32,System.Int32)">
            <summary>
            Gets the triangle indices at the specified grid.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.Points">
            <summary>
            Gets the indices of points that takes the following 8 triangles to makes up a square block.
             ____ ____
            | \ 1|2 / |
            |0_\_|_/_3|
            |4 / | \ 7|
            |_/_5|6_\_|
            
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.LogBaseTowOf(System.Int32)">
            <summary>
            The input must be a power of two.
            Bitwise hack: http://graphics.stanford.edu/~seander/bithacks.html
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.IndexBuffer">
            <summary>
            Gets the index buffer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.MaxLevelOfDetail">
            <summary>
            Gets the max level of detail.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfaceGeometry.LevelOfDetailEnabled">
            <summary>
            Gets a value indicating whether level of detail is enabled.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableSurfacePatch">
            <summary>
            A square block made up of surface patch parts. The whole surface is rendered patch by patch.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfacePatch.#ctor(Nine.Graphics.ObjectModel.DrawableSurface,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor is for internal use only.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfacePatch.UpdateLevelOfDetail">
            <summary>
            Updates the level of detail.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Draw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Draws the object using the graphics context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Draw(Nine.Graphics.ObjectModel.GraphicsContext,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Draws the object with the specified effect.
            </summary>
            <param name="context"></param>
            <param name="effect"></param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Draw(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Draws this instance with the specified effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Dispose">
            <summary>
            Disposes any resources associated with this instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Visible">
            <summary>
            Gets whether this object is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.SegmentCount">
            <summary>
            Gets the number of segments of this patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.X">
            <summary>
            Gets the x index of the patch on the parent surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Y">
            <summary>
            Gets the y index of the patch on the parent surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.DetailLevel">
            <summary>
            Gets the level of detail of this surface patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.VertexBuffer">
            <summary>
            Gets vertex buffer of this patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.IndexBuffer">
            <summary>
            Gets index buffer of this patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.StartIndex">
            <summary>
            Gets the start index of primitives that made up the patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.PrimitiveCount">
            <summary>
            Gets the number of primitives that made up the patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.VertexCount">
            <summary>
            Gets the number of vertices that made up the patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.GraphicsDevice">
            <summary>
            Gets the underlying GraphicsDevice.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Transform">
            <summary>
            Gets the transform matrix used to draw the patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Surface">
            <summary>
            Gets the parent surface.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Tag">
            <summary>
            Gets or sets any user data.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.BoundingBox">
            <summary>
            Gets the axis aligned bounding box of this surface patch.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ObjectModel.DrawableSurfacePatch.BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Position">
            <summary>
            Gets the bottom left position of the surface patch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DrawableSurfacePatch.Center">
            <summary>
            Gets or sets the center position of the surface
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DrawableSurfacePatch`1">
            <summary>
            To support ConvertVertexType, we need to store T using generic subclass.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DrawableSurfacePatch`1.Invalidate">
            <summary>
            Invalidates this instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.FindResult">
            <summary>
            Represents the result of a scene query.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.FindResult.Target">
            <summary>
            Gets the target object found. This object equals to the object added to the scene.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.FindResult.OriginalTarget">
            <summary>
            Gets the original reporting source as determined by pure hit testing.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.FindResult.Distance">
            <summary>
            Gets the distance from the ray original when doing ray casting.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.FindResult.ContainmentType">
            <summary>
            Gets the containment type when finding objects from a bounding volumn.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.FindResult.Equals(Nine.Graphics.ObjectModel.FindResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.FindResult.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.FindResult.op_Equality(Nine.Graphics.ObjectModel.FindResult,Nine.Graphics.ObjectModel.FindResult)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.FindResult.op_Inequality(Nine.Graphics.ObjectModel.FindResult,Nine.Graphics.ObjectModel.FindResult)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="value1">The value1.</param>
            <param name="value2">The value2.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.FindResult.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.Fog">
            <summary>
            Defines an area of fog.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Fog.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.Fog"/> class.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.ModelBatchExtensions">
            <summary>
            Contains extension method for <c>ModelBatch</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.ModelBatchExtensions.DrawSurface(Nine.Graphics.ModelBatch,Nine.Graphics.ObjectModel.DrawableSurface,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Draws a drawable surface using ModelBatch.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.ModelBatchExtensions.DrawSurface(Nine.Graphics.ModelBatch,Nine.Graphics.ObjectModel.DrawableSurfacePatch,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Draws a drawable surface using ModelBatch.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.ModelBatchExtensions.DrawSurface(Nine.Graphics.ModelBatch,Nine.Graphics.ObjectModel.DrawableSurfacePatch,Nine.Graphics.IEffectInstance)">
            <summary>
            Draws a drawable surface using ModelBatch.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ObjectModel.PointLight.BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.Scene">
            <summary>
            Defines a graphical scene that manages a set of objects, cameras and lights.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.Scene.sceneManager">
            <summary>
            This is the underlying scene manager that manages all spatial queryables.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.Scene.detailedQuery">
            <summary>
            Gets the spatial query that can find all the top level objects.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.Scene.flattenedQuery">
            <summary>
            Gets the spatial query that can find all the flattened objects.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.Scene.topLevelObjects">
            <summary>
            This list contains only the objects added using Scene.Add method.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.Scene.drawablesInViewFrustum">
            <summary>
            This list contains all the drawable objects in the current view frustum.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.Scene.flattenedObjectsInViewFrustum">
            <summary>
            This list contains all the flattened objects in the current view frustum.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.Scene.opaqueDrawablesInViewFrustum">
            <summary>
            This list contains all the opaque objects in the current view frustum.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ObjectModel.Scene.transparentDrawablesInViewFrustum">
            <summary>
            This list contains all the transparent objects in the current view frustum.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.Scene"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.ObjectModel.GraphicsSettings,Nine.ISceneManager{Nine.ISpatialQueryable})">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.Scene"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Add(System.Object)">
            <summary>
            Adds a new item to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Remove(System.Object)">
            <summary>
            Removes an item from the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.OnAdded(System.Object)">
            <summary>
            Called when an object is added to the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.OnRemoved(System.Object)">
            <summary>
            Called when an object is removed from the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Clear">
            <summary>
            Clears all the scene objects.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Contains(System.Object)">
            <summary>
            Gets whether the scene contains the target item.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.CreatePickRay(System.Int32,System.Int32)">
            <summary>
            Creates a pick ray based on the current camera.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Find``1(System.String)">
            <summary>
            Finds the first object of type T with the specified name.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Find(Microsoft.Xna.Framework.Ray)">
            <summary>
            Finds the nearest object that intersects the specified ray.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Find(Microsoft.Xna.Framework.Ray@,Nine.Graphics.ObjectModel.FindResult@)">
            <summary>
            Finds the nearest object that intersects the specified ray.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds all the object including child object that is of type T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll``1(System.String,System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds all the objects of type T with the specified name.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll(Microsoft.Xna.Framework.BoundingSphere@,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Finds all the objects that is contained by or intersects the specified bounding sphere.
            </summary>
            <remarks>
            This find process will look up the object tree from the leaf nodes for all the occurrences of 
            <see cref="T:Nine.ISpatialQueryable"/>. 
            If any of object's parent is contained by or intersects the input
            bounding volumn, the object will be added to the result list. 
            If the <see cref="T:Nine.ISpatialQueryable"/>
            is not found, the object will also be added to the result list.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll(Microsoft.Xna.Framework.Ray@,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Finds all the objects that intersects the specified ray.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll(Microsoft.Xna.Framework.BoundingBox@,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Finds all the objects that is contained by or intersects the specified bounding box.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll(Microsoft.Xna.Framework.BoundingFrustum@,System.Collections.Generic.ICollection{System.Object})">
            <summary>
            Finds all the objects that is contained by or intersects the specified bounding frustum.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll``1(Microsoft.Xna.Framework.BoundingSphere@,System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds all the objects of type T that is contained by or intersects the specified bounding sphere.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll``1(Microsoft.Xna.Framework.Ray@,System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds all the objects of type T that intersects the specified ray.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll``1(Microsoft.Xna.Framework.BoundingBox@,System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds all the objects of type T that is contained by or intersects the specified bounding box.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll``1(Microsoft.Xna.Framework.BoundingFrustum@,System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds all the objects of type T that is contained by or intersects the specified bounding frustum.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll(Microsoft.Xna.Framework.BoundingSphere@,System.Collections.Generic.ICollection{Nine.Graphics.ObjectModel.FindResult})">
            <summary>
            Finds all the scene objects and the original volumn for intersection test that is contained by or
            intersects the specified bounding sphere.
            </summary>
            <remarks>
            When an object tree is added to the scene using Scene.Add, 
            this find method will set the FindResult.OriginalTarget property to the original 
            <see cref="T:Nine.ISpatialQueryable"/> for the intersection test against the input bounding volumn.
            It will set the FindResult.Target property to the containing object that is added
            to the scene.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll(Microsoft.Xna.Framework.Ray@,System.Collections.Generic.ICollection{Nine.Graphics.ObjectModel.FindResult})">
            <summary>
            Finds all the scene objects and the original volumn for intersection test that intersects the specified ray.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll(Microsoft.Xna.Framework.BoundingBox@,System.Collections.Generic.ICollection{Nine.Graphics.ObjectModel.FindResult})">
            <summary>
            Finds all the scene objects and the original volumn for intersection test that is contained by or
            intersects the specified bounding box.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.FindAll(Microsoft.Xna.Framework.BoundingFrustum@,System.Collections.Generic.ICollection{Nine.Graphics.ObjectModel.FindResult})">
            <summary>
            Finds all the scene objects and the original volumn for intersection test that is contained by or
            intersects the specified bounding frustum.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.ProjectDecal(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Graphics.Texture2D,System.Single,System.Single,System.Single)">
            <summary>
            Projects a decal onto the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.ProjectDecal(Microsoft.Xna.Framework.Ray,Microsoft.Xna.Framework.Graphics.Texture2D,Microsoft.Xna.Framework.Graphics.Texture2D,System.Single,System.Single,System.Single,System.Single,System.Predicate{Nine.IGeometry})">
            <summary>
            Projects a decal onto the scene.
            </summary>
            <param name="ray">The ray to project.</param>
            <param name="texture">The decal texture.</param>
            <param name="normalMap">The decal normal map or null if normal mapping is disabled.</param>
            <param name="width">The width of the decal texture in world space.</param>
            <param name="height">The height of the decal texture in world space.</param>
            <param name="depth">The depth of the decal bounds or 0 to use the average of width and height.</param>
            <param name="rotation">The rotation of the decal texture.</param>
            <param name="filter">A predicate determines whether the target object should show the decal.</param>
            <returns> The decal object added to the scene or null if nothing is projected.</returns>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.ComputeBounds">
            <summary>
            Computes the bounds of the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.ComputeBounds``1">
            <summary>
            Computes the bounds of all the object of type T in the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.ComputeBounds``1(System.Predicate{``0})">
            <summary>
            Computes the bounds of all the object of that matches the specified predicate in the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Draw(System.TimeSpan)">
            <summary>
            Updates and draws the scene under the current camera and graphics setting.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Draw(System.TimeSpan,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Updates and draws the scene with the specified camera settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Draw(System.TimeSpan,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Updates and draws all the drawable objects in the scene with the specified camera setting using the
            target effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.OnAddedToViewFrustum(System.Object)">
            <summary>
            Called when an object is added to view frustum each frame.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.UpdateObjects(System.TimeSpan)">
            <summary>
            Updates all the object in the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Scene.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Scene.Settings">
            <summary>
            Gets the graphics settings
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Scene.Camera">
            <summary>
            Gets or sets the active camera.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Scene.GraphicsDevice">
            <summary>
            Gets the underlying graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Scene.Statistics">
            <summary>
            Gets the statistics of this renderer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Scene.GraphicsContext">
            <summary>
            Gets or sets the graphics context.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Scene.SceneObjects">
            <summary>
            Gets a list of objects added to the scene.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Scene.Name">
            <summary>
            Gets or sets the name.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Scene.Tag">
            <summary>
            Gets or sets the tag.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Scene.Count">
            <summary>
            Gets the number of objects managed by this scene.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ObjectModel.SpotLight.BoundingBoxChanged">
            <summary>
            Occurs when the bounding box changed.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.DisplayObject">
            <summary>
            Defines a display object that contains a list of objects.
            </summary>
            <remarks>
            This class serves as a container to composite other objects.
            If you wish to create your own display object, derive from <c>Transformable</c> instead.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DisplayObject.CopyTo(System.Object[],System.Int32)">
            <summary>
            Copies all the child objects to the target array.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DisplayObject.Bind(Nine.Graphics.ObjectModel.Transformable,Nine.Graphics.ObjectModel.Transformable)">
            <summary>
            Binds the transformation of the source object to the target object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DisplayObject.Bind(Nine.Graphics.ObjectModel.Transformable,Nine.Graphics.ObjectModel.Transformable,System.String)">
            <summary>
            Binds the transformation of the source object to the target object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DisplayObject.Bind(Nine.Graphics.ObjectModel.Transformable,Nine.Graphics.ObjectModel.Transformable,System.String,System.Nullable{Microsoft.Xna.Framework.Matrix})">
            <summary>
            Binds the transformation of the source object to the target object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DisplayObject.Unbind(Nine.Graphics.ObjectModel.Transformable,Nine.Graphics.ObjectModel.Transformable)">
            <summary>
            Unbinds the transformation of the source object to the target object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DisplayObject.#ctor">
            <summary>
            Initializes a new instance of <c>DisplayObject</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.DisplayObject.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.DisplayObject"/> class.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DisplayObject.Children">
            <summary>
            Gets the child drawable owned used by this drawable.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DisplayObject.Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> at the specified index.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DisplayObject.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified name.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DisplayObject.ChildCount">
            <summary>
            Gets the number of child objects
            </summary>
        </member>
        <member name="E:Nine.Graphics.ObjectModel.DisplayObject.Added">
            <summary>
            Occurs when a child object is added.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ObjectModel.DisplayObject.Removed">
            <summary>
            Occurs when a child object is removed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DisplayObject.TransformBindings">
            <summary>
            Gets all the transform bindings owned by this <c>DisplayObject</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.DisplayObject.Animations">
            <summary>
            Gets all the animations in this display object.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.Drawable">
            <summary>
            Base class for all drawables.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Drawable.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.Drawable"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Drawable.Update(System.TimeSpan)">
            <summary>
            Updates the internal states of this drawable.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Drawable.Draw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Draws the object using the graphics context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Drawable.Draw(Nine.Graphics.ObjectModel.GraphicsContext,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Draws the object with the specified effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Drawable.BeginDraw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Perform any updates before this object is rendered.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Drawable.EndDraw(Nine.Graphics.ObjectModel.GraphicsContext)">
            <summary>
            Perform any updates after this object is rendered.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Drawable.Dispose">
            <summary>
            Disposes any resources associated with this instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.Drawable.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Drawable.Visible">
            <summary>
            Gets or sets whether the drawable is visible.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Drawable.Material">
            <summary>
            Gets the material used by this drawable.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.Drawable.MaterialValue">
            <summary>
            When overriden, returns the material used by this drawable.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.GraphicsContext">
            <summary>
            Defines a context that contains commonly used parameters for rendering.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.GraphicsContext.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.ObjectModel.GraphicsSettings,Nine.Graphics.ObjectModel.GraphicsStatistics)">
            <summary>
            Initializes a new instance of <c>GraphicsContext</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.GraphicsDevice">
            <summary>
            Gets the underlying graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.Settings">
            <summary>
            Gets the graphics settings
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.Statistics">
            <summary>
            Gets the graphics statistics.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.ElapsedTime">
            <summary>
            Gets the elapsed time since last update.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.ElapsedSeconds">
            <summary>
            Gets the elapsed seconds since last update.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.View">
            <summary>
            Gets the view matrix for this drawing operation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.Projection">
            <summary>
            Gets the projection matrix for this drawing operation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.EyePosition">
            <summary>
            Gets the eye position.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.ViewFrustum">
            <summary>
            Gets the view frustum for this drawing operation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.SpriteBatch">
            <summary>
            Gets the sprite batch to draw strings and 2D textures.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.ModelBatch">
            <summary>
            Gets the model batch to draw models and custom geometries.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.PrimitiveBatch">
            <summary>
            Gets the primitive batch to draw 3D dynamic primitives.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsContext.ParticleBatch">
            <summary>
            Gets the particle batch to draw 3D particle system effects.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.GraphicsSettings">
            <summary>
            Defines commonly used settings when drawing using the renderer.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.GraphicsSettings.#ctor">
            <summary>
            Initializes a new instance of <c>GraphicsSettings</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.BackgroundColor">
            <summary>
            Gets or sets the color of the background.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.PreferHighDynamicRangeLighting">
            <summary>
            Gets or sets whether high dynamic range lighting technique is used.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.ShadowEnabled">
            <summary>
            Gets or sets whether shadows are enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.MultiPassShadowEnabled">
            <summary>
            Gets or sets whether multi-pass shadow overlays are enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.LightingEnabled">
            <summary>
            Gets or sets whether lights are enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.MultiPassLightingEnabled">
            <summary>
            Gets or sets whether multi-pass light overlays are enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.FogEnable">
            <summary>
            Gets or sets a value indicating whether fog is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.ScreenEffectEnabled">
            <summary>
            Gets or sets whether lights are enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.ShadowMapResolution">
            <summary>
            Gets or sets preferred shadowmap resolution.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.DefaultFont">
            <summary>
            Gets or sets the default font.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.DefaultDebugControlEnabled">
            <summary>
            Gets or sets a value indicating whether default debug control is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.MaterialQuality">
            <summary>
            Gets or sets the overal material quanlity for each leveled material in the scene.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.GraphicsSettings.Debug">
            <summary>
            Gets the debug settings.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.GraphicsDebugSetting">
            <summary>
            Defines commonly used settings when debugging the renderer.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.GraphicsStatistics">
            <summary>
            Defines commonly used statistics of the renderer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.SkyBox.Texture">
            <summary>
            Gets or sets the skybox texture.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredPointLight.#ctor(Nine.Graphics.Effects.Deferred.DeferredPointLight)">
            <summary>
            Creates a new DeferredPointLight by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredPointLight.Clone">
            <summary>
            Creates a clone of the current DeferredPointLight instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DirectionalLightEffect.#ctor(Nine.Graphics.Effects.DirectionalLightEffect)">
            <summary>
            Creates a new DirectionalLightEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DirectionalLightEffect.Clone">
            <summary>
            Creates a clone of the current DirectionalLightEffect instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.PointLightEffect.#ctor(Nine.Graphics.Effects.PointLightEffect)">
            <summary>
            Creates a new PointLightEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.PointLightEffect.Clone">
            <summary>
            Creates a clone of the current PointLightEffect instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.SpotLightEffect.#ctor(Nine.Graphics.Effects.SpotLightEffect)">
            <summary>
            Creates a new SpotLightEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.SpotLightEffect.Clone">
            <summary>
            Creates a clone of the current SpotLightEffect instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredEffect.#ctor(Nine.Graphics.Effects.Deferred.DeferredEffect)">
            <summary>
            Creates a new DeferredEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredEffect.Clone">
            <summary>
            Creates a clone of the current DeferredEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.Deferred.GraphicsBufferEffect">
            <summary>
            An effect that generates depth and normal info of the scene for deferred lighting.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.GraphicsBufferEffect.#ctor(Nine.Graphics.Effects.Deferred.GraphicsBufferEffect)">
            <summary>
            Creates a new GraphicsBufferEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.GraphicsBufferEffect.Clone">
            <summary>
            Creates a clone of the current GraphicsBufferEffect instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.ClearEffect.#ctor(Nine.Graphics.Effects.Deferred.ClearEffect)">
            <summary>
            Creates a new ClearEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.ClearEffect.Clone">
            <summary>
            Creates a clone of the current ClearEffect instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredDirectionalLight.#ctor(Nine.Graphics.Effects.Deferred.DeferredDirectionalLight)">
            <summary>
            Creates a new DeferredDirectionalLight by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredDirectionalLight.Clone">
            <summary>
            Creates a clone of the current DeferredDirectionalLight instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredSpotLight.#ctor(Nine.Graphics.Effects.Deferred.DeferredSpotLight)">
            <summary>
            Creates a new DeferredSpotLight by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredSpotLight.Clone">
            <summary>
            Creates a clone of the current DeferredSpotLight instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ObjectModel.TransformBinding">
            <summary>
            Binds the transform from the source object to the target object. Once a transform binding
            is set, the source object will be transformed based on the target object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.TransformBinding.#ctor(Nine.Graphics.ObjectModel.Transformable,Nine.Graphics.ObjectModel.Transformable)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ObjectModel.TransformBinding"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ObjectModel.TransformBinding.#ctor">
            <summary>
            For serialization
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.TransformBinding.Source">
            <summary>
            Gets or sets the source object that is bound to the target object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.TransformBinding.Target">
            <summary>
            Gets or sets the target object to be bound.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.TransformBinding.Transform">
            <summary>
            Gets or sets the bias transformation matrix for the binding.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.TransformBinding.TargetBone">
            <summary>
            Gets or sets the bone name if the target is a model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.TransformBinding.UseBoneScale">
            <summary>
            Gets or sets a value indicating whether source object is scaled 
            according to the target bone.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ObjectModel.TransformBinding.ShareSkeleton">
            <summary>
            Gets or sets a value indicating whether the source model will 
            use the target skeleton.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.SoftParticleEffect.#ctor(Nine.Graphics.ParticleEffects.SoftParticleEffect)">
            <summary>
            Creates a new SoftParticleEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.SoftParticleEffect.Clone">
            <summary>
            Creates a clone of the current SoftParticleEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Centrum">
            <summary>
            Geometric primitive class for drawing cylinders.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Primitive`1">
            <summary>
            Base class for simple geometric primitive models. This provides a vertex
            buffer, an index buffer, plus methods for drawing the model. Classes for
            specific types of primitive (CubePrimitive, SpherePrimitive, etc.) are
            derived from this common base, and use the AddVertex and AddIndex methods
            to specify their geometry.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.ICustomPrimitive">
            <summary>
            Represents a custom primitive.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.ICustomPrimitive.VertexBuffer">
            <summary>
            Gets the vertex buffer of the primitive.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.ICustomPrimitive.IndexBuffer">
            <summary>
            Gets the index buffer of the primitive.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.ICustomPrimitive.BoundingSphere">
            <summary>
            Gets the optional bounding sphere of the primitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Primitives.Primitive`1"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.AddVertex(Microsoft.Xna.Framework.Vector3,`0)">
            <summary>
            Adds a new vertex to the primitive model. This should only be called
            during the initialization process, before InitializePrimitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.AddIndex(System.Int32)">
            <summary>
            Adds a new index to the primitive model. This should only be called
            during the InitializePrimitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.AddIndex(System.Int32[])">
            <summary>
            Adds a new index to the primitive model. This should only be called
            during the InitializePrimitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.InitializePrimitive(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Once all the geometry has been specified by calling AddVertex and AddIndex,
            this method copies the vertex and index data into GPU format buffers, ready
            for efficient rendering.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.Draw(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Draws the primitive model, using the specified effect. Unlike the other
            Draw overload where you just specify the world/view/projection matrices
            and color, this method does not set any renderstates, so you must make
            sure all states are set to sensible values before you call it.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.Finalize">
            <summary>
            Finalizer.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.Dispose">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Primitive`1.Dispose(System.Boolean)">
            <summary>
            Frees resources used by this object.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.Positions">
            <summary>
            Gets a readonly list of vertex positions.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.Indices">
            <summary>
            Gets a read-only list of geometry indices.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.VertexCount">
            <summary>
            Gets the vertex count.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.PrimitiveCount">
            <summary>
            Gets the primitive count.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.BoundingSphere">
            <summary>
            Gets the optional bounding sphere of the primitive.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.InvertWindingOrder">
            <summary>
            Gets or sets a value indicating whether winding order will be inverted.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Primitives.Primitive`1.CurrentVertex">
            <summary>
            Queries the index of the current vertex. This starts at
            zero, and increments every time AddVertex is called.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Centrum.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new cylinder primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Centrum.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32)">
            <summary>
            Constructs a new cylinder primitive,
            with the specified size and tessellation level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Centrum.GetCircleVector(System.Int32,System.Int32)">
            <summary>
            Helper method computes a point on a circle.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Bezier">
            <summary>
            Base class for primitives that are made out of cubic bezier patches
            (a type of curved surface). This is used by the TeapotPrimitive.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.CreatePatchIndices(System.Int32,System.Boolean)">
            <summary>
            Creates indices for a patch that is tessellated at the specified level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.CreatePatchVertices(Microsoft.Xna.Framework.Vector3[],System.Int32,System.Boolean)">
            <summary>
            Creates vertices for a patch that is tessellated at the specified level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.BezierInterpolate(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Performs a cubic bezier interpolation between four scalar control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.BezierInterpolate(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Performs a cubic bezier interpolation between four Vector3 control
            points, returning the value at the specified time (t ranges 0 to 1).
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.BezierTangent(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Computes the tangent of a cubic bezier curve at the specified time,
            when given four scalar control points.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Bezier.BezierTangent(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Computes the tangent of a cubic bezier curve at the specified time,
            when given four Vector3 control points. This is used for calculating
            normals (by crossing the horizontal and vertical tangent vectors).
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Cube">
            <summary>
            Geometric primitive class for drawing cubes.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new cube primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single)">
            <summary>
            Constructs a new cube primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cube.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Constructs a new cube primitive, with the specified size.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.ModelBatchExtensions">
            <summary>
            Contains extension method for <c>ModelBatch</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Plane">
            <summary>
            Geometric primitive class for drawing spheres.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Plane.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new sphere primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Plane.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32,System.Int32)">
            <summary>
            Constructs a new sphere primitive,
            with the specified size and tessellation level.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Dome">
            <summary>
            Geometric primitive class for drawing spheres.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Dome.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new sphere primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Dome.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32)">
            <summary>
            Constructs a new sphere primitive,
            with the specified size and tessellation level.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Torus">
            <summary>
            Geometric primitive class for drawing toruses.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Torus.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new torus primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Torus.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32)">
            <summary>
            Constructs a new torus primitive,
            with the specified size and tessellation level.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Teapot">
            <summary>
            Geometric primitive class for drawing teapots.
            
            This teapot model was created by Martin Newell and Jim Blinn in 1975.
            It consists of ten cubic bezier patches, a type of curved surface which
            can be tessellated to create triangles at various levels of detail. The
            use of curved surfaces allows a smoothly curved, visually interesting,
            and instantly recognizable shape to be specified by a tiny amount of
            data, which made the teapot a popular test data set for computer graphics
            researchers. It has been used in so many papers and demos that many
            graphics programmers have come to think of it as a standard geometric
            primitive, right up there with cubes and spheres!
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Teapot.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new teapot primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Teapot.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Int32)">
            <summary>
            Constructs a new teapot primitive,
            with the specified size and tessellation level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Teapot.TessellatePatch(Nine.Graphics.Primitives.Teapot.TeapotPatch,System.Int32,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Tessellates the specified bezier patch.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Primitives.Teapot.TeapotPatches">
            <summary>
            Static data array defines the bezier patches that make up the teapot.
            </summary>
        </member>
        <member name="F:Nine.Graphics.Primitives.Teapot.TeapotControlPoints">
            <summary>
            Static array defines the control point positions that make up the teapot.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Teapot.TeapotPatch">
            <summary>
            The teapot model consists of 10 bezier patches. Each patch has 16 control
            points, plus a flag indicating whether it should be mirrored in the Z axis
            as well as in X (all of the teapot is symmetrical from left to right, but
            only some parts are symmetrical from front to back). The control points
            are stored as integer indices into the TeapotControlPoints array.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Primitives.Cylinder">
            <summary>
            Geometric primitive class for drawing cylinders.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cylinder.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new cylinder primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cylinder.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Int32)">
            <summary>
            Constructs a new cylinder primitive,
            with the specified size and tessellation level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cylinder.CreateCap(System.Int32,System.Single,System.Single,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Helper method creates a triangle fan to close the ends of the cylinder.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Cylinder.GetCircleVector(System.Int32,System.Int32)">
            <summary>
            Helper method computes a point on a circle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Sphere.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Constructs a new sphere primitive, using default settings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Primitives.Sphere.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Int32)">
            <summary>
            Constructs a new sphere primitive,
            with the specified size and tessellation level.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredAmbientLight.#ctor(Nine.Graphics.Effects.Deferred.DeferredAmbientLight)">
            <summary>
            Creates a new DeferredAmbientLight by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.DeferredAmbientLight.Clone">
            <summary>
            Creates a clone of the current DeferredAmbientLight instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureUsage">
            <summary>
            Defines commonly used texture usage.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.None">
            <summary>
            Default texture usage.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Diffuse">
            <summary>
            Specifies the target texture is used as diffuse texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Ambient">
            <summary>
            Specifies the target texture is used as ambient texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Emissive">
            <summary>
            Specifies the target texture is used as emissive texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Specular">
            <summary>
            Specifies the target texture is used as specular texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Detail">
            <summary>
            Specifies the target texture is used as detail texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Overlay">
            <summary>
            Specifies the target texture is used as overlay texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Dual">
            <summary>
            Specifies the target texture is used as dual texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Reflection">
            <summary>
            Specifies the target texture is used as reflection texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Refraction">
            <summary>
            Specifies the target texture is used as refraction texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Lightmap">
            <summary>
            Specifies the target texture is used as lightmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.DarkMap">
            <summary>
            Specifies the target texture is used as lightmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Luminance">
            <summary>
            Specifies the target texture is used as luminance texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Bloom">
            <summary>
            Specifies the target texture is used as bloom texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Blur">
            <summary>
            Specifies the target texture is used as blur texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.ShadowMap">
            <summary>
            Specifies the target texture is used as shadowmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.NormalMap">
            <summary>
            Specifies the target texture is used as normalmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Heightmap">
            <summary>
            Specifies the target texture is used as heightmap texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.BumpMap">
            <summary>
            Specifies the target texture is used as bump texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.EnvironmentMap">
            <summary>
            Specifies the target texture is used as environment texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.DepthBuffer">
            <summary>
            Specifies the target texture is used as depth buffer texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.LightBuffer">
            <summary>
            Specifies the target texture is used as light buffer texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureUsage.Decal">
            <summary>
            Specifies the target texture is used as decal texture.
            </summary>
        </member>
        <member name="T:Nine.Graphics.VertexPositionNormal">
            <summary>
            Vertex format for shader vertex format used all over the place.
            It contains: Position, Normal vector
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormal.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormal.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormal.VertexElements">
            <summary>
            Vertex elements for Mesh.Clone
            </summary>
        </member>
        <member name="P:Nine.Graphics.VertexPositionNormal.SizeInBytes">
            <summary>
            Stride size.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.Deferred.GraphicsBuffer">
            <summary>
            Represents the G-Buffer used by light pre-pass deferred lighting.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.GraphicsBuffer.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Initializes a new instance of DeferredEffect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.GraphicsBuffer.Begin">
            <summary>
            Begins the rendering of the scene using DepthNormalEffect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.GraphicsBuffer.End">
            <summary>
            Ends the rendering of the scene and generates DepthNormalMap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.GraphicsBuffer.DrawLights(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix,System.Collections.Generic.ICollection{Nine.Graphics.Effects.Deferred.IDeferredLight})">
            <summary>
            Draws the specified lights onto the light buffer.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.GraphicsBuffer.BeginLights(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Begins the rendering of all the lights in the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.GraphicsBuffer.DrawLight(Nine.Graphics.Effects.Deferred.IDeferredLight)">
            <summary>
            Draws a light instance for DeferredEffect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.Deferred.GraphicsBuffer.EndLights">
            <summary>
            Ends the rendering of lights and generates LightTexture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.GraphicsDevice">
            <summary>
            Gets the graphics device used by this effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.Effect">
            <summary>
            Gets the effect used to render the graphics buffer between BeginScene and EndScene pair.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.NormalBuffer">
            <summary>
            Gets the texture that contains world space normal info of the scene.
            </summary>
            <remarks>
            World space normal info is stored in the RGB channel of the texture.
            Specular power is stored in the A channel of the texture.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.DepthBuffer">
            <summary>
            Gets the texture that contains depth info of the scene.
            </summary>
            <remarks>
            Depth info is stored in the R channel of the texture.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.LightBuffer">
            <summary>
            Gets the texture that contains lighting info of the scene.
            </summary>
            <remarks>
            Light color is stored in the RGB channel of the texture.
            Light specular multiplier is stored in the Alpha channel of the texture.
            Light specular color is ignored.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.NormalBufferFormat">
            <summary>
            Gets or sets the preferred surface format for graphics buffer.
            The default value is SurfaceFormat.Color.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.DepthBufferFormat">
            <summary>
            Gets or sets the preferred surface format for graphics buffer.
            The default value is SurfaceFormat.Single.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.LightBufferFormat">
            <summary>
            Gets or sets the preferred surface format for light buffer.
            The default value is SurfaceFormat.Color.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.BlendState">
            <summary>
            Gets the blend state used to draw the lights.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.Deferred.GraphicsBuffer.DepthStencilState">
            <summary>
            Gets the depth stencil state used to draw the lights.
            </summary>
        </member>
        <member name="T:Nine.Graphics.RenderTargetPool">
            <summary>
            Represents a pool of render targets.
            </summary>
        </member>
        <member name="M:Nine.Graphics.RenderTargetPool.AddRef(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32)">
            <summary>
            Acquires a render target with the specified parameter.
            </summary>
        </member>
        <member name="M:Nine.Graphics.RenderTargetPool.AddRef(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            Acquires a render target with the specified parameter.
            </summary>
        </member>
        <member name="M:Nine.Graphics.RenderTargetPool.AddRef(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Int32,System.Boolean,Microsoft.Xna.Framework.Graphics.SurfaceFormat,Microsoft.Xna.Framework.Graphics.DepthFormat,System.Int32,Microsoft.Xna.Framework.Graphics.RenderTargetUsage)">
            <summary>
            Acquires a render target with the specified parameter.
            </summary>
        </member>
        <member name="M:Nine.Graphics.RenderTargetPool.AddRef(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Adds a reference to an existing render target.
            </summary>
        </member>
        <member name="M:Nine.Graphics.RenderTargetPool.Release(Microsoft.Xna.Framework.Graphics.RenderTarget2D)">
            <summary>
            Releases a render target.
            </summary>
        </member>
        <member name="P:Nine.Graphics.RenderTargetPool.ActiveRenderTargets">
            <summary>
            Gets the number of render targets been used.
            </summary>
        </member>
        <member name="P:Nine.Graphics.RenderTargetPool.TotalRenderTargets">
            <summary>
            Gets the number of render targets been created.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.IEffectTextureTransform">
            <summary>
            Defines an interface for effects that supports arbitrary texture transform.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.IEffectTextureTransform.TextureTransform">
            <summary>
            Gets or sets the texture transform matrix.
            </summary>
            <see cref="T:Nine.Graphics.TextureTransform"/>
        </member>
        <member name="T:Nine.Graphics.Effects.IEffectColorMatrix">
            <summary>
            Defines an interface for effects that supports arbitrary color transform.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.IEffectColorMatrix.ColorMatrix">
            <summary>
            Gets or sets the color transform matrix.
            </summary>
            <see cref="T:Nine.Graphics.ColorMatrix"/>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleEffectCollection">
            <summary>
            Represents a collection of particle effects.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ColorController">
            <summary>
            Defines a basic controller that changes the color of the particle
            effect based on time.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleController`1">
            <summary>
            Defines the base class for all particle controllers.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleController">
            <summary>
            Defines the base class for all particle controllers.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.IParticleController">
            <summary>
            Defines an controller that controls the appearence and behavior of each
            individual particle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.IParticleController.Reset(Nine.Graphics.ParticleEffects.Particle@)">
            <summary>
            Resets a newly emitted particle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.IParticleController.Update(System.Single,Nine.Graphics.ParticleEffects.Particle@)">
            <summary>
            Updates an existing particle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleController.Update(System.Single,Nine.Graphics.ParticleEffects.Particle@)">
            <summary>
            Updates an existing particle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleController.Reset(Nine.Graphics.ParticleEffects.Particle@)">
            <summary>
            Resets a new emitted particle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleController.ParticleEffect">
            <summary>
            Gets the containing partcie effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleController.Enabled">
            <summary>
            Gets or sets whether this emitter is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleController.Random">
            <summary>
            Gets the random number generator used by particle emitters.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ColorController.EndColor">
            <summary>
            Range of values controlling the particle end color and alpha. 
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.FadeController">
            <summary>
            Defines a basic controller that fade the particle in and out.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SizeController">
            <summary>
            Defines a basic controller that changes the size of the particle
            effect based on time.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.SizeController.EndSize">
            <summary>
            Range of values controlling the particle end size.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.RotationController">
            <summary>
            Defines a basic controller that changes the rotation of the particle
            effect based on time.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.RotationController.EndRotation">
            <summary>
            Range of values controlling the particle end rotation.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SpeedController">
            <summary>
            Defines a basic controller that controls the acceleration of the particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.SpeedController.EndSpeed">
            <summary>
            Range of values representing the particle end speed in proportion to its start speed.
            A value of 1 means no change, a value of 0 means complete stop.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ForceController">
            <summary>
            Defines a basic controller that applies a constant linear force on the particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ForceController.Force">
            <summary>
            Gets or sets the force amount.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.TangentForceController">
            <summary>
            Defines a basic controller that applies a constant tangent force on the particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.TangentForceController.Force">
            <summary>
            Gets or sets the force amount.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.TangentForceController.Up">
            <summary>
            Gets or sets the up axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.TangentForceController.Center">
            <summary>
            Gets or sets the center position.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.AbsorbController">
            <summary>
            Defines a basic controller that absorbs the particles to a given point.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.AbsorbController.Position">
            <summary>
            Gets or sets the absorb position.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.AbsorbController.Force">
            <summary>
            Gets or sets the absorb force.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.Particle">
            <summary>
            Represents each individual particle in a particle system effect.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Position">
            <summary>
            Gets or sets the position of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Velocity">
            <summary>
            Gets or sets the moving speed of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Rotation">
            <summary>
            Gets or sets the rotation of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Alpha">
            <summary>
            Gets or sets the transparency of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Color">
            <summary>
            Gets or sets the color of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Size">
            <summary>
            Gets or sets the size of this particle.
            </summary>        
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.ElapsedTime">
            <summary>
            Gets or sets the elapsed time (in seconds) since this particle was created.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Duration">
            <summary>
            Gets or sets the duration (in seconds) of this particle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.Particle.Age">
            <summary>
            Gets or sets age of this particle in the range 0 to 1.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleControllerCollection">
            <summary>
            Defines a collection of particle controllers.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SpriteBatchExtensions">
            <summary>
            Contains extension methods for drawing particle effect using SpriteBatch.
            </summary>
        </member>
        <member name="T:Nine.Graphics.QuaternionCamera">
            <summary>
            Camera that can perform Quaternion rotation
            and look in all six direction.
            </summary>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.#ctor">
            <summary>
            Creates a new instance of QuaternionCamera.
            </summary>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.Move(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Moves the camera's position by the vector offset provided along world axes.
            </summary>
            <param name="translate"></param>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.MoveRelative(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Moves the camera's position by the vector offset 
            provided along it's own axes (relative to orientation).
            </summary>
            <param name="translate"></param>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.Roll(System.Single)">
            <summary>
            Rolls the camera anticlockwise, around its local z axis.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.Yaw(System.Single)">
            <summary>
            Rotates the camera anticlockwise around it's local y axis.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.Pitch(System.Single)">
            <summary>
            Pitches the camera up/down anticlockwise around it's local z axis.
            </summary>
            <param name="angle"></param>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.Rotate(Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Rotate the camera around an arbitrary axis.
            </summary>
            <param name="axis"></param>
            <param name="angle"></param>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.Rotate(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Rotate the camera around an arbitrary axis using a Quaternion.
            </summary>
            <param name="q"></param>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.UpdateViewMatrix">
            <summary>
            Performs update of ViewMatrix.
            </summary>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.UpdateProjectionMatrix">
            <summary>
            Performs update of ProjectionMatrix.
            </summary>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.MakeViewMatrix(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Creates view matrix from position and orientation
            </summary>
        </member>
        <member name="M:Nine.Graphics.QuaternionCamera.MultiplyQuaternion(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Multiply quaterion by Vector3
            </summary>
            <param name="leftQuaterion"></param>
            <param name="rightVector"></param>
            <returns></returns>
        </member>
        <member name="P:Nine.Graphics.QuaternionCamera.Viewport">
            <summary>
            Gets the optional viewport of this cameara.
            </summary>
        </member>
        <member name="P:Nine.Graphics.QuaternionCamera.Position">
            <summary>
            Gets or Sets camera position.
            </summary>
        </member>
        <member name="P:Nine.Graphics.QuaternionCamera.Orientation">
            <summary>
            Gets or Sets camera orientation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.QuaternionCamera.NearPlane">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.QuaternionCamera.FarPlane">
            <summary>
            
            </summary>
        </member>
        <member name="P:Nine.Graphics.QuaternionCamera.AspectRatio">
            <summary>
            Gets or Sets camera aspect ratio.
            </summary>
        </member>
        <member name="P:Nine.Graphics.QuaternionCamera.FieldOfView">
            <summary>
            Gets or Sets camera field of view.
            <remarks>Value are expressed in radians</remarks>
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.Adoption.#ctor(Nine.Graphics.ScreenEffects.Adoption)">
            <summary>
            Creates a new Adoption by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.Adoption.Clone">
            <summary>
            Creates a clone of the current Adoption instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.AntiAliasEffect.#ctor(Nine.Graphics.ScreenEffects.AntiAliasEffect)">
            <summary>
            Creates a new AntiAliasEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.AntiAliasEffect.Clone">
            <summary>
            Creates a clone of the current AntiAliasEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.BlurEffect">
            <summary>
            A post processing screen effect that blurs the whole screen.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.BlurEffect.OnCreated">
            <summary>
            Creates a new instance of Gaussian blur post processing.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.BlurEffect.SetBlurEffectParameters(System.Single,System.Single)">
            <summary>
            Computes sample weightings and texture coordinate offsets
            for one pass of a separable gaussian blur filter.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.BlurEffect.ComputeGaussian(System.Single)">
            <summary>
            Evaluates a single point on the gaussian falloff curve.
            Used for setting up the blur filter weightings.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.BlurEffect.#ctor(Nine.Graphics.ScreenEffects.BlurEffect)">
            <summary>
            Creates a new BlurEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.BlurEffect.Clone">
            <summary>
            Creates a clone of the current BlurEffect instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BlurEffect.BlurAmount">
            <summary>
            Gets or sets the amount of bluring.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BlurEffect.Step">
            <summary>
            Gets or sets the step of sampled points.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BlurEffect.Direction">
            <summary>
            Gets or sets the direction of bluring in radians.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BlurEffect.SampleCount">
            <summary>
            Gets or sets the blur sample count. Should be one of 3, 7, 11, 15.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ColorMatrixEffect">
            <summary>
            A post processing screen effect that transforms the color of the whole screen.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ColorMatrixEffect.#ctor(Nine.Graphics.ScreenEffects.ColorMatrixEffect)">
            <summary>
            Creates a new ColorMatrixEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ColorMatrixEffect.Clone">
            <summary>
            Creates a clone of the current ColorMatrixEffect instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.ColorMatrixEffect.Transform">
            <summary>
            Gets or sets the color transform matrix. See MatrixExtensions.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.BasicScreenEffect">
            <summary>
            Defines an basic screen effect that uses only one <c>Effect</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.IScreenEffect">
            <summary>
            Interface for a single post processing effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.IScreenEffect.Process(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Processes the input texture and returns the output texture.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.IScreenEffect.ProcessAndDraw(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>
            Processes and draws the input texture on to the screen.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.BasicScreenEffect.#ctor">
            <summary>
            Creates a new instance of <c>ScreenEffectEdge</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BasicScreenEffect.GraphicsDevice">
            <summary>
            Gets the GraphicsDevice associated with this instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BasicScreenEffect.Effect">
            <summary>
            Gets or sets the effect file used by this <c>BasicScreenEffect</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BasicScreenEffect.Enabled">
            <summary>
            Gets or sets whether this <c>BasicScreenEffect</c> is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BasicScreenEffect.SurfaceFormat">
            <summary>
            Gets or sets the surface format of the render target.
            Specify null to use the surface format of the current backbuffer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BasicScreenEffect.RenderTargetSize">
            <summary>
            Gets or sets the render target size.
            Specify null to use input texture size.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.BasicScreenEffect.RenderTargetScale">
            <summary>
            Gets or sets the render target scale. This value is multiplied with
            <c>RenderTargetSize</c> to determine the final size of the render target.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ScreenEffectCollection">
            <summary>
            Represents a collection of <c>ScreenEffectEdge</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ChainedScreenEffect">
            <summary>
            Defines an basic screen effect that uses an effect chain.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ChainedScreenEffect.#ctor">
            <summary>
            Creates a new instance of <c>ChainedScreenEffect</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.ChainedScreenEffect.Effects">
            <summary>
            Gets all the effects used by this pass.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.ChainedScreenEffect.Enabled">
            <summary>
            Gets or sets whether this <c>ChainedScreenEffect</c> is enabled.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.AdoptionEffect">
            <summary>
            Defines a post processing effect that adopt scene changes.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.AdoptionEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new instance of <c>AdoptationEffect</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.AdoptionEffect.Speed">
            <summary>
            Get or sets the speed of the adoptation.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.DepthOfFieldEffect.#ctor(Nine.Graphics.ScreenEffects.DepthOfFieldEffect)">
            <summary>
            Creates a new DepthOfFieldEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.DepthOfFieldEffect.Clone">
            <summary>
            Creates a clone of the current DepthOfFieldEffect instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.LuminanceEffect.#ctor(Nine.Graphics.ScreenEffects.LuminanceEffect)">
            <summary>
            Creates a new LuminanceEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.LuminanceEffect.Clone">
            <summary>
            Creates a clone of the current LuminanceEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.MultiPassScreenEffect">
            <summary>
            Defines a post processing effect combined from multiple passes.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.MultiPassScreenEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new instance of <c>MultiPassScreenEffect</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffect.GraphicsDevice">
            <summary>
            Gets the GraphicsDevice associated with this instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffect.Passes">
            <summary>
            Gets all the passes used by this <c>MultiPassScreenEffect</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffect.CombineEffect">
            <summary>
            Gets or sets the effect to combine the result of all passes.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffect.BlendState">
            <summary>
            Gets or sets the blend state of this <c>MultiPassScreenEffect</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffect.Enabled">
            <summary>
            Gets or sets whether this <c>MultiPassScreenEffect</c> is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffect.SurfaceFormat">
            <summary>
            Gets or sets the surface format of the render target.
            Specify null to use the surface format of the current backbuffer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffect.RenderTargetSize">
            <summary>
            Gets or sets the render target size.
            Specify null to use input texture size.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffect.RenderTargetScale">
            <summary>
            Gets or sets the render target scale. This value is multiplied with
            <c>RenderTargetSize</c> to determine the final size of the render target.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPass">
            <summary>
            Defines a pass used by <c>MultiPassScreenEffect</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPass.#ctor">
            <summary>
            Creates a new instance of <c>ScreenEffectEdge</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPass.SurfaceFormat">
            <summary>
            Gets or sets the surface format of the render target.
            Specify null to use the surface format of the current backbuffer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPass.RenderTargetSize">
            <summary>
            Gets or sets the render target size.
            Specify null to use input texture size.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPass.RenderTargetScale">
            <summary>
            Gets or sets the render target scale. This value is multiplied with
            <c>RenderTargetSize</c> to determine the final size of the render target.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPass.BlendState">
            <summary>
            Gets or sets the blend state of this pass. This value will
            determine how to blend with other passes when a <c>CombineEffect</c>
            is now found.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPass.Color">
            <summary>
            Gets or sets a Color value that is multiplied to this <c>MultiPassScreenEffectPass</c>
            when a <c>CombineEffect</c> is not found.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPass.TextureUsage">
            <summary>
            Gets or sets the <c>TextureUsage</c> of the output texture.
            The texture produced by this pass will be feed to the <c>CombineEffect</c>
            property of the parent <c>MultiPassScreenEffect</c> through
            <c>IEffectTexture</c> interface.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.MultiPassScreenEffectPassCollection">
            <summary>
            Represents a collection of <c>ScreenEffectEdge</c>.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.EmbossEffect.#ctor(Nine.Graphics.ScreenEffects.EmbossEffect)">
            <summary>
            Creates a new EmbossEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.EmbossEffect.Clone">
            <summary>
            Creates a clone of the current EmbossEffect instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.NoiseEffect.#ctor(Nine.Graphics.ScreenEffects.NoiseEffect)">
            <summary>
            Creates a new NoiseEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.NoiseEffect.Clone">
            <summary>
            Creates a clone of the current NoiseEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.PixelateEffect">
            <summary>
            A post processing screen effect that pixelate the whole screen.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.PixelateEffect.#ctor(Nine.Graphics.ScreenEffects.PixelateEffect)">
            <summary>
            Creates a new PixelateEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.PixelateEffect.Clone">
            <summary>
            Creates a clone of the current PixelateEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.RadialBlurEffect">
            <summary>
            A post processing screen effect that blurs the whole screen radially.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.RadialBlurEffect.#ctor(Nine.Graphics.ScreenEffects.RadialBlurEffect)">
            <summary>
            Creates a new RadialBlurEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.RadialBlurEffect.Clone">
            <summary>
            Creates a clone of the current RadialBlurEffect instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.RadialBlurEffect.Center">
            <summary>
            Gets or sets the center of the radial blur.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.RadialBlurEffect.BlurAmount">
            <summary>
            Gets or sets the blur amount.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScaleEffect.#ctor(Nine.Graphics.ScreenEffects.ScaleEffect)">
            <summary>
            Creates a new ScaleEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScaleEffect.Clone">
            <summary>
            Creates a clone of the current ScaleEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ThresholdEffect">
            <summary>
            A post processing screen effect that only show pixels brighter than the threshold.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ThresholdEffect.#ctor(Nine.Graphics.ScreenEffects.ThresholdEffect)">
            <summary>
            Creates a new ThresholdEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ThresholdEffect.Clone">
            <summary>
            Creates a clone of the current ThresholdEffect instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ToneMappingEffect.#ctor(Nine.Graphics.ScreenEffects.ToneMappingEffect)">
            <summary>
            Creates a new ToneMappingEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ToneMappingEffect.Clone">
            <summary>
            Creates a clone of the current ToneMappingEffect instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.WiggleEffect.#ctor(Nine.Graphics.ScreenEffects.WiggleEffect)">
            <summary>
            Creates a new WiggleEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.WiggleEffect.Clone">
            <summary>
            Creates a clone of the current WiggleEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.VertexPositionNormalTangentBinormalTexture">
            <summary>
            Tangent vertex format for shader vertex format used all over the place.
            It contains: Position, Normal vector, texture coords, tangent vector.
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.TextureCoordinate">
            <summary>
            Texture coordinates
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.Tangent">
            <summary>
            Tangent
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.Binormal">
            <summary>
            Binormal
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.#ctor(Microsoft.Xna.Framework.Vector3,System.Single,System.Single,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create tangent vertex
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Create tangent vertex
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.VertexElements">
            <summary>
            Vertex elements for Mesh.Clone
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.GenerateVertexElements">
            <summary>
            Generate vertex declaration
            </summary>
        </member>
        <member name="P:Nine.Graphics.VertexPositionNormalTangentBinormalTexture.SizeInBytes">
            <summary>
            Stride size, in XNA called SizeInBytes. I'm just conforming with that.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PrimitiveBatchExtensions">
            <summary>
            Contains extension method for <c>PrimitiveBatch</c>.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PrimitiveSortMode">
            <summary>
            Defines primitive sort-rendering options.
            </summary>
        </member>
        <member name="F:Nine.Graphics.PrimitiveSortMode.Deferred">
            <summary>
            Primitives are not drawn until End is called. End will apply graphics device
            settings and draw all the sprites in one batch, in the same order calls to
            Draw were received. This mode allows Draw calls to two or more instances
            of ModelBatch without introducing conflicting graphics device settings.
            ModelBatch defaults to Deferred mode.
            </summary>
        </member>
        <member name="F:Nine.Graphics.PrimitiveSortMode.Immediate">
            <summary>
            Begin will apply new graphics device settings, and primitives will be drawn
            within each Draw call. In Immediate mode there can only be one active 
            ModelBatch instance without introducing conflicting device settings.
            </summary>
        </member>
        <member name="T:Nine.Graphics.PrimitiveBatch">
            <summary>
            Enables a group of dynamic primitives to be drawn.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PrimitiveBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new PrimitiveBatch instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PrimitiveBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Creates a new PrimitiveBatch instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.PrimitiveBatch.CreateBillboard(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Matrix.CreateConstraintBillboard has a sudden change effect that is not
            desirable, so rolling out our own version.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PrimitiveBatch.GraphicsDevice">
            <summary>
            Gets the underlying graphics device used by this PrimitiveBatch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.PrimitiveBatch.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.EffectParts.SplatterTextureEffectPart">
            <summary>
            FIXME: This is an internal class, how to change these textures at runtime.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.EffectParts.FogEffectPart.SetFogVector(Microsoft.Xna.Framework.Matrix@,System.Single,System.Single,Microsoft.Xna.Framework.Graphics.EffectParameter)">
            <summary>
            Sets a vector which can be dotted with the object space vertex position to compute fog amount.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.EffectParts.SkinTransformEffectPart.SetBoneTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Sets an array of skinning bone transform matrices.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.EffectParts.SkinTransformEffectPart.GetBoneTransforms(System.Int32)">
            <summary>
            Gets a copy of the current skinning bone transform matrices.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.DecalEffect">
            <summary>
            Represents an effect for drawing decals.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DecalEffect.#ctor(Nine.Graphics.Effects.DecalEffect)">
            <summary>
            Creates a new DecalEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DecalEffect.Clone">
            <summary>
            Creates a clone of the current DecalEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.DepthEffect">
            <summary>
            Represents an effect for drawing geometry depth.
            This effect is usually used to generate shadow map depth values.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DepthEffect.#ctor(Nine.Graphics.Effects.DepthEffect)">
            <summary>
            Creates a new DepthEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.DepthEffect.Clone">
            <summary>
            Creates a clone of the current DepthEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.SkyBoxEffect">
            <summary>
            Represents an effect for drawing skyboxes.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.SkyBoxEffect.#ctor(Nine.Graphics.Effects.SkyBoxEffect)">
            <summary>
            Creates a new SkyBoxEffect by cloning parameter settings from an existing instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.SkyBoxEffect.Clone">
            <summary>
            Creates a clone of the current SkyBoxEffect instance.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.LinkedEffect">
            <summary>
            Represents a Effect that is linked from LinkedEffectParts.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedEffect.Find``1">
            <summary>
            Finds the first accurance of LinkedEffectPart that is of type T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedEffect.FindAll``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Finds all the accurances of LinkedEffectPart that is of type T.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedEffect.SetBoneTransforms(Microsoft.Xna.Framework.Matrix[])">
            <summary>
            Sets the bones transforms for the skinned effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.LinkedEffect.SetTexture(Nine.Graphics.TextureUsage,Microsoft.Xna.Framework.Graphics.Texture)">
            <summary>
            Sets the texture with the specified texture usage.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.GraphicsBufferEffect">
            <summary>
            Gets the linked effect used to render the graphics buffer in deferred lighting.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.EffectParts">
            <summary>
            Gets all the LinkedEffectPart that makes up this LinkedEffect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.Projection">
            <summary>
            Gets or sets the projection matrix in the current effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.View">
            <summary>
            Gets or sets the view matrix in the current effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.World">
            <summary>
            Gets or sets the world matrix in the current effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.SkinningEnabled">
            <summary>
            Gets or sets if vertex skinning is enabled by this effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.Texture">
            <summary>
            Gets or sets the primiary diffuse texture of the current effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.FogColor">
            <summary>
            Gets or sets the fog color.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.FogEnabled">
            <summary>
            Enables or disables fog.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.FogEnd">
            <summary>
            Gets or sets maximum z value for fog.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.LinkedEffect.FogStart">
            <summary>
            Gets or sets minimum z value for fog.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.LinkedEffectReader">
            <summary>
            Content reader for LinkedEffect.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenEffects.ScreenEffect">
            <summary>
            Represents post processing effects.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new instance of ScreenEffect for post processing.
            </summary>
            <param name="graphics">A GraphicsDevice instance.</param>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.Begin">
            <summary>
            Begins the rendering of the scene to be post processed.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.End">
            <summary>
            Ends the rendering of the scene, applying all the post processing effects.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.CreateBloom(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single)">
            <summary>
            Creates a bloom post processing effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.CreateHighDynamicRange(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a High Dynamic Range (HDR) post processing effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.CreateHighDynamicRange(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Single,System.Single,System.Nullable{System.Single})">
            <summary>
            Creates a High Dynamic Range (HDR) post processing effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.CreateLuminanceChain(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32,System.Nullable{System.Single})">
            <summary>
            Creates a luminance chain for computing the luminance of the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.CreateDepthOfField(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a depth of field post processing effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.CreateAdditive(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Single)">
            <summary>
            Creates a post processing effect that additively blends the scene.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.CreateEffect(Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Creates a basic post processing effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.CreateMerged(Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.ScreenEffects.IScreenEffect[])">
            <summary>
            Creates a merged post processing effect from a list of existing effects.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ScreenEffects.ScreenEffect.CreateMerged(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Collections.Generic.IEnumerable{Nine.Graphics.ScreenEffects.IScreenEffect})">
            <summary>
            Creates a merged post processing effect from a list of existing effects.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.ScreenEffect.GraphicsDevice">
            <summary>
            Gets the GraphicsDevice associated with this instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.ScreenEffect.SurfaceFormat">
            <summary>
            Gets or sets the surface format of the render target.
            Specify null to use the surface format of the current backbuffer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.ScreenEffect.RenderTargetSize">
            <summary>
            Gets or sets the render target size.
            Specify null to use current viewport size.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ScreenEffects.ScreenEffect.RenderTargetScale">
            <summary>
            Gets or sets the render target scale. This value is multiplied with
            <c>RenderTargetSize</c> to determine the final size of the render target.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenCameraCoordinate">
            <summary>
            Defines the coordinate system used by ScreenCamera.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ScreenCameraCoordinate.ThreeDimension">
            <summary>
            Represents a right handed coordinate system with X axis pointing right,
            Y axis pointing up and Z axis pointing outside the screen.
            The origin of the coordinate system is the center of the screen.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ScreenCameraCoordinate.TwoDimension">
            <summary>
            Represents a left handed coordinate system with X axis pointing right,
            Y axis pointing down and Z axis pointing outside the screen.
            The origin of the coordinate system is the top left corner of the screen.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ScreenCamera">
            <summary>
            Defines a 2D orthographic screen camera.
            </summary>
        </member>
        <member name="T:Nine.Graphics.VertexPositionColorNormalTexture">
            <summary>
            Vertex format for shader vertex format used all over the place.
            It contains: Position, Normal vector, 2 texture coords
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.TextureCoordinate">
            <summary>
            Texture coordinates
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionColorNormalTexture.VertexElements">
            <summary>
            Vertex elements for Mesh.Clone
            </summary>
        </member>
        <member name="P:Nine.Graphics.VertexPositionColorNormalTexture.SizeInBytes">
            <summary>
            Stride size.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelCollision">
            <summary>
            Defines a octree base model collision detection.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelCollision.Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets wether the object contains the given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelCollision.Intersects(Microsoft.Xna.Framework.Ray)">
            <summary>
            Gets the nearest intersection point from the specifed picking ray.
            </summary>
            <returns>Distance to the start of the ray.</returns>
        </member>
        <member name="P:Nine.Graphics.ModelCollision.CollisionTree">
            <summary>
            Gets the collision tree.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ColorMatrix">
            <summary>
            Helper class to create color matrices.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ColorMatrix.YiqTransform">
            <summary>
            Transforms RGB colours in YIQ space.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ColorMatrix.RgbTransform">
            <summary>
            Transforms YIQ colours in RGB space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureTransform">
            <summary>
            Helper class to create texture transformation matrices.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.CreateTranslation(System.Single,System.Single)">
            <summary>
            Creates a texture transform matrix from translation.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.CreateScale(System.Single,System.Single)">
            <summary>
            Creates a texture transform matrix from scale.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.CreateRotation(System.Single)">
            <summary>
            Creates a texture transform matrix from rotation.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.CreateFromSourceRectange(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Creates a texture transform matrix from a source rectangle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.Transform(Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Transforms a texture coordinate based on the texture transform.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureTransform.ToArray(Microsoft.Xna.Framework.Matrix)">
            <summary>
            Returns a 3x3 array representation of the texture transform.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureListItem">
            <summary>
            Defines a texture and a source rectangle.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureListItem.Texture">
            <summary>
            Gets or sets the texture.
            </summary>
        </member>
        <member name="F:Nine.Graphics.TextureListItem.SourceRectangle">
            <summary>
            Gets or sets the source rectangle.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureListItem.#ctor(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle})">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.TextureListItem"/> struct.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureList">
            <summary>
            Defines a list of textures and source rectangles.
            </summary>
        </member>
        <member name="M:Nine.Graphics.TextureList.GetIndex(System.String)">
            <summary>
            Looks up the numeric index of the specified sprite. 
            </summary>
        </member>
        <member name="T:Nine.Graphics.TextureListReader">
            <summary>
            Reader for TextureList.
            </summary>
        </member>
        <member name="T:Nine.Graphics.EffectExtensions">
            <summary>
            Contains extension methods for Effects.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleBatch">
            <summary>
            Enables a group of particle effects to be drawn in batches.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleBatch.SoftParticleFade">
            <summary>
            Gets or sets the distance where the particle pixels start to fade.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleBatch.DepthBuffer">
            <summary>
            Gets or sets the current depth buffer to enable the rendering of soft particles.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleBatch.GraphicsDevice">
            <summary>
            Gets the underlying graphics device used by this ModelBatch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleBatch.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.IParticleEmitter">
            <summary>
            Defines an emitter that emit new particles for particle effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.IParticleEmitter.Clone">
            <summary>
            Creates a shadow copy of this instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.IParticleEmitter.Update(System.Single,Nine.Graphics.ParticleEffects.ParticleAction)">
            <summary>
            Updates the emitter, emits any new particles during the update.
            </summary>
            <returns>
            Returns true when this emitter has stopped emitting new particles.
            </returns>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.IParticleEmitter.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.ParticleEffects.IParticleEmitter"/> is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.IParticleEmitter.Position">
            <summary>
            Gets or sets the position of this <see cref="T:Nine.Graphics.ParticleEffects.IParticleEmitter"/>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.IParticleEmitter.Direction">
            <summary>
            Gets or sets the forward direction of this <see cref="T:Nine.Graphics.ParticleEffects.IParticleEmitter"/>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.IParticleEmitter.BoundingBox">
            <summary>
            Gets the bounding box that potentially contains all the particles emitted by
            this particle emitter.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleEmitter">
            <summary>
            Defines the base class for all particle emitters.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.ParticleEffects.ParticleEmitter"/> class.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.CreateRandomVector(Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Creates the random vector.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.CreateRandomVector(Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Creates the random vector.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.CreateRandomVector(Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@,System.Single)">
            <summary>
            Creates the random vector.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.Update(System.Single,Nine.Graphics.ParticleEffects.ParticleAction)">
            <summary>
            Updates the emitter, emits any new particles during the update.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.Clone">
            <summary>
            Creates a shadow copy of this instance.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEmitter.Emit(System.Single,Microsoft.Xna.Framework.Vector3@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Emits a new particle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Enabled">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Nine.Graphics.ParticleEffects.ParticleEmitter"/> is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.EmitCount">
            <summary>
            Gets or sets the number of particles emitted when triggered.
            When this value is greater then zero, Lifetime and Emission is ignored.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Emission">
            <summary>
            Gets or sets the number of particles emitted per second.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Delay">
            <summary>
            Gets or sets the time before the first particle is emitted.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Lifetime">
            <summary>
            Gets or sets the total lifetime of this particle effect when triggered.
            The default value is forever.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Position">
            <summary>
            Gets or sets the position of this emitter.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Direction">
            <summary>
            Gets or sets the direction of this emitter.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Duration">
            <summary>
            Gets or sets the duration of each particle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Color">
            <summary>
            Gets or sets the range of values controlling the particle start color and alpha. 
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Size">
            <summary>
            Gets or sets the range of values controlling the particle start size.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Rotation">
            <summary>
            Gets or sets the range of values controlling the particle start rotation.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Speed">
            <summary>
            Gets or sets the range of values controlling the particle start speed.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.Random">
            <summary>
            Gets the random number generator used by particle emitters.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.BoundingBox">
            <summary>
            Gets the bounding box that potentially contains all the particles emitted by
            this particle emitter.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEmitter.BoundingBoxValue">
            <summary>
            Gets the bounding box that defines the region of this particle emitter without been offset by Position.
            </summary>
        </member>
        <member name="T:Nine.Graphics.FreeCamera">
            <summary>
            A first person free camera.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelViewerCamera">
            <summary>
            Defines a camera used to view models.
            </summary>
        </member>
        <member name="T:Nine.Graphics.TopDownEditorCamera">
            <summary>
            Defines a camera used to edit worlds.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Geometry">
            <summary>
            Geometric representation of a model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Geometry.#ctor(Nine.IGeometry)">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Geometry"/> class.
            </summary>
            <param name="geometry">The geometry.</param>
        </member>
        <member name="M:Nine.Graphics.Geometry.#ctor(System.Collections.Generic.ICollection{Microsoft.Xna.Framework.Vector3},System.Collections.Generic.ICollection{System.UInt16})">
            <summary>
            Initializes a new instance of the <see cref="T:Nine.Graphics.Geometry"/> class.
            </summary>
            <param name="positions">The positions.</param>
            <param name="indices">The indices.</param>
        </member>
        <member name="M:Nine.Graphics.Geometry.#ctor">
            <summary>
            Used by XNA content serialzier
            </summary>
        </member>
        <member name="P:Nine.Graphics.Geometry.BoundingSphere">
            <summary>
            Gets the bounding sphere.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Geometry.BoundingBox">
            <summary>
            Gets the bounding box.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Geometry.Positions">
            <summary>
            Gets a readonly list of vertex positions.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Geometry.Indices">
            <summary>
            Gets a read-only list of geometry indices.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Heightmap">
            <summary>
            The geometric representation of heightmap. 
            The up axis of the terrain is Vector.UnitY.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.#ctor(System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Heightmap.
            </summary>
            <param name="step">Size of the smallest square block that made up the terrain.</param>
            <param name="segmentCountX">Number of the smallest square block in X axis, or heightmap texture U axis.</param>
            <param name="segmentCountY">Number of the smallest square block in Y axis, or heightmap texture V axis.</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.#ctor(System.Single[],System.Single,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of Heightmap.
            </summary>
            <param name="heightmap">Heights of each points. The dimension of the array should be (segmentCountX + 1) * (segmentCountY + 1).</param>
            <param name="step">Size of the smallest square block that made up the terrain.</param>
            <param name="segmentCountX">Number of the smallest square block in X axis, or heightmap texture U axis.</param>
            <param name="segmentCountY">Number of the smallest square block in Y axis, or heightmap texture V axis.</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetPosition(System.Int32,System.Int32)">
            <summary>
            Gets the position of the terrain on given point.
            </summary>
            <param name="x">Point on x axis.</param>
            <param name="y">Point on y axis.</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetHeight(System.Int32,System.Int32)">
            <summary>
            Gets the height of the terrain on given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetNormal(System.Int32,System.Int32)">
            <summary>
            Gets the normal of the terrain on given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetTangent(System.Int32,System.Int32)">
            <summary>
            Gets the tangent of the terrain on given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetIndex(System.Int32,System.Int32)">
            <summary>
            Gets the index of the terrain on given point. 
            The return value can be used to index Heights, Normals and Tangents.
            </summary>
            <param name="x">Point on x axis.</param>
            <param name="y">Point on y axis.</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.LoadHeightmap(System.Single[])">
            <summary>
            Loads this terrain geometry with the specified heightmap data.
            </summary>
            <param name="heightmap">Heights of each points. The dimension of the array should be (segmentCountX + 1) * (segmentCountY + 1).</param>
        </member>
        <member name="M:Nine.Graphics.Heightmap.CalculateNormalsAndTangents(System.Int32,System.Int32,System.Single[],System.Single,System.Single,Microsoft.Xna.Framework.Vector3[]@,Microsoft.Xna.Framework.Vector3[]@)">
            <summary>
            Calculate normals from height data
            </summary>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetHeight(System.Single,System.Single)">
            <summary>
            Gets the height of the terrain at a given location.
            </summary>
            <returns>Null if the location is outside the boundary of the terrain.</returns>
        </member>
        <member name="M:Nine.Graphics.Heightmap.GetNormal(System.Single,System.Single)">
            <summary>
            Gets the normal of the terrain at a given location.
            </summary>
            <returns>Null if the location is outside the boundary of the terrain.</returns>
        </member>
        <member name="M:Nine.Graphics.Heightmap.TryGetHeightAndNormal(System.Single,System.Single,System.Single@,Microsoft.Xna.Framework.Vector3@)">
            <summary>
            Gets the height and normal of the terrain at a given location.
            </summary>
            <returns>False if the location is outside the boundary of the terrain.</returns>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Size">
            <summary>
            Gets the size of the terrain geometry in 3 axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Step">
            <summary>
            Gets the size of the smallest square block that made up the terrain.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Heights">
            <summary>
            Gets the heights of all terrain points.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Normals">
            <summary>
            Gets the normals of all terrain points.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Tangents">
            <summary>
            Gets the tangents of all terrain points.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Width">
            <summary>
            Gets the number of the smallest square block in X axis, or heightmap texture U axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Height">
            <summary>
            Gets the number of the smallest square block in Y axis, or heightmap texture V axis.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.Tag">
            <summary>
            Gets or sets any user data.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Heightmap.BoundingBox">
            <summary>
            Gets the axis aligned bounding box of this terrain.
            </summary>
        </member>
        <member name="E:Nine.Graphics.Heightmap.Invalidate">
            <summary>
            Occured when the heightmap changed.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelSortMode">
            <summary>
            Defines model sort-rendering options.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ModelSortMode.Deferred">
            <summary>
            Models are not drawn until End is called. End will apply graphics device
            settings and draw all the sprites in one batch, in the same order calls to
            Draw were received. This mode allows Draw calls to two or more instances
            of ModelBatch without introducing conflicting graphics device settings.
            ModelBatch defaults to Deferred mode.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ModelSortMode.Immediate">
            <summary>
            Begin will apply new graphics device settings, and models will be drawn
            within each Draw call. In Immediate mode there can only be one active 
            ModelBatch instance without introducing conflicting device settings.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ModelSortMode.Effect">
            <summary>
            Same as Deferred mode, except models are sorted by effect prior to drawing.
            This can improve performance when drawing opaque models of uniform depth.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ModelSortMode.BackToFront">
            <summary>
            Same as Deferred mode, except models are sorted by depth in back-to-front
            order prior to drawing. This procedure is recommended when drawing transparent
            models of varying depths.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ModelSortMode.FrontToBack">
            <summary>
            Same as Deferred mode, except models are sorted by depth in front-to-back
            order prior to drawing. This procedure is recommended when drawing opaque
            models of varying depths.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelBatch">
            <summary>
            Enables a group of models to be drawn with different custom effects.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelBatch.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates a new ModelBatch instance.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelBatch.GraphicsDevice">
            <summary>
            Gets the underlying graphics device used by this ModelBatch.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelBatch.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelTag">
            <summary>
            Tag used by models.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelTag.Skeleton">
            <summary>
            Gets the skinning data attached to the model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelTag.Collision">
            <summary>
            Gets the collision data attached to the model.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelTag.Animations">
            <summary>
            Gets the animation data attached to the model.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelMeshPartTag">
            <summary>
            Tag used by ModelMeshPart.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMeshPartTag.BoundingBox">
            <summary>
            Gets the bounding box of this ModelMeshPart.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelMeshPartTag.Textures">
            <summary>
            Gets the additional textures (E.g. normalmap) attached to the ModelMeshPart.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelExtensions">
            <summary>
            Contains extension methods to models.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.IsSkinned(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Gets whether the specified model has any skinning info attached to it.
            Works with models that are processed by Nine.Pipeline.Processors.ExtendedModelProcessor.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAnimations(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Gets the animation data associated with the specified model.
            Works with models that are processed by Nine.Pipeline.Processors.ExtendedModelProcessor.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAnimation(Microsoft.Xna.Framework.Graphics.Model,System.String)">
            <summary>
            Gets the animation data associated with the specified model.
            Works with models that are processed by Nine.Pipeline.Processors.ExtendedModelProcessor.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAnimation(Microsoft.Xna.Framework.Graphics.Model,System.Int32)">
            <summary>
            Gets the animation data associated with the specified model.
            Works with models that are processed by Nine.Pipeline.Processors.ExtendedModelProcessor.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAbsoluteBoneTransform(Microsoft.Xna.Framework.Graphics.Model,System.Int32)">
            <summary>
            Gets the aboslute transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetAbsoluteBoneTransform(Microsoft.Xna.Framework.Graphics.Model,System.String)">
            <summary>
            Gets the aboslute transform of the specified bone.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.Contains(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets wether the model contains the given point.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.Intersects(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Ray)">
            <summary>
            Gets the nearest intersection point from the specifed picking ray.
            </summary>
            <returns>Distance to the start of the ray.</returns>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetTextures(Microsoft.Xna.Framework.Graphics.ModelMeshPart)">
            <summary>
            Gets all the texture names attached to the model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetTexture(Microsoft.Xna.Framework.Graphics.ModelMeshPart,Nine.Graphics.TextureUsage)">
            <summary>
            Gets the texture attached to the model with the specified name.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.GetEffects(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Gets all the effects in the model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ConvertEffectTo(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Converts all the effects of the Model to a new effect.
            Materials (Diffuse, Emissive, etc) and textures parameters are copied to the new effect.
            </summary>
            <remarks>
            This function requires the effect to be either build in effect or effects 
            that implements IEffectMaterial or IEffectTexture.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ConvertEffectTo(Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Converts all the effects of the ModelMesh to a new effect.
            Materials (Diffuse, Emissive, etc) and textures parameters are copied to the new effect.
            </summary>
            <remarks>
            This function requires the effect to be either build in effect or effects 
            that implements IEffectMaterial or IEffectTexture.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ConvertEffectTo(Microsoft.Xna.Framework.Graphics.ModelMeshPart,Microsoft.Xna.Framework.Graphics.Effect)">
            <summary>
            Converts the current effect of the ModelMeshPart to a new effect.
            Materials (Diffuse, Emissive, etc) and textures parameters are copied to the new effect.
            </summary>
            <remarks>
            This function requires the effect to be either build in effect or effects 
            that implements IEffectMaterial or IEffectTexture.
            </remarks>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ConvertEffectTo(Microsoft.Xna.Framework.Graphics.ModelMeshPart,Microsoft.Xna.Framework.Graphics.Effect,System.Boolean,System.Boolean)">
            <summary>
            Converts the current effect of the ModelMeshPart to a new effect.
            Materials (Diffuse, Emissive, etc) and textures parameters are copied to the new effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ComputeBoundingBox(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Computes the bounding box for the specified xna model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ComputeBoundingBoxFromVertices(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.BoundingBox@)">
            <summary>
            Computes the bounding box for the specified xna model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ComputeBoundingBox(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart)">
            <summary>
            Computes the bounding box for the specified xna model.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.CopyPositionsTo(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Vector3[],System.Int32)">
            <summary>
            Copies the positions of the model to the target array.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.CopyIndicesTo(Microsoft.Xna.Framework.Graphics.Model,System.UInt16[],System.Int32)">
            <summary>
            Copies the indices of the model to the target array.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.CopyPositionsTo(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart,Microsoft.Xna.Framework.Vector3[],System.Int32)">
            <summary>
            Copies the positions of the model mesh part to the target array.
            The positions are not transformed by the transform of the model mesh.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.CopyIndicesTo(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart,System.UInt16[],System.Int32)">
            <summary>
            Copies the indices of the model mesh part to the target array.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelExtensions.ComputeBoundingBoxFromVertices(Microsoft.Xna.Framework.Graphics.Model,Microsoft.Xna.Framework.Graphics.ModelMesh,Microsoft.Xna.Framework.Graphics.ModelMeshPart,System.Nullable{Microsoft.Xna.Framework.Matrix},Microsoft.Xna.Framework.BoundingBox@)">
            <summary>
            Computes the bounding box for the specified xna model.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelSkeleton">
            <summary>
            Defines a bone hierarchy used by models.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelSkeleton.#ctor(Microsoft.Xna.Framework.Graphics.Model)">
            <summary>
            Initializes a new instance of <c>ModelSkeleton</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelSkeleton.BoneTransforms">
            <summary>
            Gets a fixed sized array of transformation matrices for each bone
            according to its parent bone.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelSkeleton.ParentBones">
            <summary>
            Gets the hierarchical relationship between bones.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ModelSkeletonData">
            <summary>
            Combines all the data needed to render and animate a skinned object.
            This is typically stored in the Tag property of the Model being animated.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelSkeletonData.#ctor(System.Collections.Generic.List{Microsoft.Xna.Framework.Matrix},System.Int32)">
            <summary>
            Constructs a new skinning data object.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ModelSkeletonData.#ctor">
            <summary>
            Private constructor for use by the XNB deserializer.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelSkeletonData.InverseAbsoluteBindPose">
            <summary>
            Vertex to bonespace transforms for each bone in the skeleton.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ModelSkeletonData.SkeletonRoot">
            <summary>
            Index of the skeleton root on the parent mesh bone collection.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.PointEmitter">
            <summary>
            Defines a point emitter that emit particles from a point in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.BoxEmitter">
            <summary>
            Defines a point emitter that emit particles from a box in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.SphereEmitter">
            <summary>
            Defines a point emitter that emit particles from a sphere in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.CylinderEmitter">
            <summary>
            Defines a point emitter that emit particles from a cylinder in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.LineEmitter">
            <summary>
            Defines a point emitter that emit particles from a list of lines in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.BoneEmitter">
            <summary>
            Defines a point emitter that emit particles from a model bone collection in 3D space.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleType">
            <summary>
            Defines how each particle should be rendered.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.ParticleType.Billboard">
            <summary>
            The particle will be rendered as 3D billboard that always faces the camera.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.ParticleType.ConstrainedBillboard">
            <summary>
            The particle will be rendered as 3D constrained billboard that is constrained
            by the forward moving axis while still faces the camera.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.ParticleType.ConstrainedBillboardUp">
            <summary>
            The particle will be rendered as 3D constrained billboard that is constrained
            by the specified axis while still faces the camera.
            </summary>
        </member>
        <member name="F:Nine.Graphics.ParticleEffects.ParticleType.RibbonTrail">
            <summary>
            The particle will be rendered as 3D ribbon trail.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleAction">
            <summary>
            Action for particles.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleEffect">
            <summary>
            Defines a special visual effect made up of particles.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.#ctor">
            <summary>
            Creates a new particle effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.#ctor(System.Int32)">
            <summary>
            Creates a new particle effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.CreateMerged(System.Collections.Generic.IEnumerable{Nine.Graphics.ParticleEffects.ParticleEffect})">
            <summary>
            Creates a merged effect from serveral input particle effects.
            See http://nine.codeplex.com/discussions/272121
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.Trigger">
            <summary>
            Creates an instance of the particle effect.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.Trigger(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Creates an instance of the particle effect at the specified position.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.Trigger(Microsoft.Xna.Framework.Vector3,System.TimeSpan)">
            <summary>
            Creates an instance of the particle effect at the specified position.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.Trigger(Microsoft.Xna.Framework.Vector3,System.Int32)">
            <summary>
            Creates an instance of the particle effect at the specified position.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.ForEach(Nine.Graphics.ParticleEffects.ParticleAction)">
            <summary>
            Traverses all active particles.
            </summary>
        </member>
        <member name="M:Nine.Graphics.ParticleEffects.ParticleEffect.Update(System.TimeSpan)">
            <summary>
            Updates the particle system.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.ParticleType">
            <summary>
            Gets or sets the type of each particle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Enabled">
            <summary>
            Gets or sets whether this particle effect is enabled.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Stretch">
            <summary>
            Gets or sets a scale factor along the forward axis when drawing this
            particle effect using constrained billboard.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Up">
            <summary>
            Gets or sets the up axis of each particle.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Texture">
            <summary>
            Gets or sets the texture used by this particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.SourceRectangle">
            <summary>
            Gets or sets the source rectangle in the texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.TextureList">
            <summary>
            Gets or sets the texture and source rectangle using <see cref="P:Nine.Graphics.ParticleEffects.ParticleEffect.TextureList"/>.
            </summary>
            <remarks>
            You can bind the TextureList property with a <see cref="!:SpriteAnimation"/>.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.BlendState">
            <summary>
            Gets or sets the blend state between each particles of this particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.BackgroundBlendState">
            <summary>
            Gets or sets the blend state used to blend this particle effect with the background.
            Specify null to use the current <c>BlendState</c>.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.DepthSortEnabled">
            <summary>
            Gets or sets a value indicating whether two pass rendering technique is used to sort each particle based on depth.
            The default value is false. This flag is only available when you are drawing using ParticleBatch.
            </summary>
            <remarks>
            When depth sort is enabled, particles are not sorted based on their distance to the camera. Instead, a two pass
            rendering technique is used to eliminate depth order problems.
            During the first pass, depth stencial state is set to Default and alpha test is turned on, so the opaque part of the
            particles are ordered using the depth buffer.
            The second pass draws the particles with depth stencial state set to DepthRead and alpha blend is turned on, so the
            transparent part of the particles are rendered.
            </remarks>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.ReferenceAlpha">
            <summary>
            Gets or sets the reference alpha value used in two pass rendering.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.SoftParticleEnabled">
            <summary>
            Gets or sets a value indicating whether particles should softly blends with other scene objects.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Emitter">
            <summary>
            Gets or sets the emitter prototype of this particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Controllers">
            <summary>
            Gets a collection of controllers that defines the visual of this particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.ChildEffects">
            <summary>
            Gets a collection of particle effects that is used as the appareance of each
            particle spawned by this particle effect.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.EndingEffects">
            <summary>
            Gets a collection of particle effects that is fired when each particle spawned
            by this particle effect is about to die.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.Tag">
            <summary>
            Gets or sets user data.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.ParticleCount">
            <summary>
            Gets the approximate particle count.
            </summary>
        </member>
        <member name="P:Nine.Graphics.ParticleEffects.ParticleEffect.ActiveEmitters">
            <summary>
            Gets a list of triggers owned by this <c>ParticleEffect</c>.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ParticleEffects.ParticleEffect.ParticleEmitted">
            <summary>
            Occurs when a particle is about to die.
            </summary>
        </member>
        <member name="E:Nine.Graphics.ParticleEffects.ParticleEffect.ParticleRetired">
            <summary>
            Occurs when a particle is about to die.
            </summary>
        </member>
        <member name="T:Nine.Graphics.ParticleEffects.ParticleVertex">
            <summary>
            Custom vertex structure for drawing point sprite particles.
            </summary>
        </member>
        <member name="T:Nine.Graphics.VertexPositionNormalDualTexture">
            <summary>
            Vertex format for shader vertex format used all over the place.
            It contains: Position, Normal vector, 2 texture coords
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.Position">
            <summary>
            Position
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.Normal">
            <summary>
            Normal
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.TextureCoordinate">
            <summary>
            Texture coordinates
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.TextureCoordinate1">
            <summary>
            Tangent
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalDualTexture.#ctor(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Create tangent vertex
            </summary>
        </member>
        <member name="F:Nine.Graphics.VertexPositionNormalDualTexture.VertexElements">
            <summary>
            Vertex elements for Mesh.Clone
            </summary>
        </member>
        <member name="M:Nine.Graphics.VertexPositionNormalDualTexture.GenerateVertexElements">
            <summary>
            Generate vertex declaration
            </summary>
        </member>
        <member name="P:Nine.Graphics.VertexPositionNormalDualTexture.SizeInBytes">
            <summary>
            Stride size, in XNA called SizeInBytes. I'm just conforming with that.
            </summary>
        </member>
        <member name="T:Nine.Graphics.Effects.ShadowMap">
            <summary>
            Represents a shadow drawing technique using shadowmap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.ShadowMap.#ctor(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Initializes a new instance of ShadowMap.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.ShadowMap.Begin">
            <summary>
            Begins the shadowmap generation process and clears the shadowmap to white.
            </summary>
        </member>
        <member name="M:Nine.Graphics.Effects.ShadowMap.End">
            <summary>
            Ends the shadowmap generation process and returns the result shadowmap texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.ShadowMap.GraphicsDevice">
            <summary>
            Gets the graphics device.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.ShadowMap.Size">
            <summary>
            Gets or sets the size of the shadow map texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.ShadowMap.SurfaceFormat">
            <summary>
            Gets or sets the preferred surface format of the shadow map texture.
            The default value is SurfaceFormat.Single.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.ShadowMap.Texture">
            <summary>
            Gets the underlying shadow map texture.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.ShadowMap.BlurEnabled">
            <summary>
            Gets whether a bluring pass is applied to the final shadow map.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.ShadowMap.Effect">
            <summary>
            Gets the effect used to draw models between Begin/End pair.
            </summary>
        </member>
        <member name="P:Nine.Graphics.Effects.ShadowMap.Blur">
            <summary>
            Gets the underlying blur effect used to blur the final shadow map.
            </summary>
        </member>
        <member name="T:Nine.Graphics.WorldExtensions">
            <summary>
            Extends <see cref="T:Nine.World"/> to be capable of drawing graphics.
            </summary>
        </member>
        <member name="M:Nine.Graphics.WorldExtensions.CreateGraphics(Nine.World,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Creates the graphics scene to render this world.
            </summary>
        </member>
        <member name="M:Nine.Graphics.WorldExtensions.CreateGraphics(Nine.World,Microsoft.Xna.Framework.Graphics.GraphicsDevice,Nine.Graphics.ObjectModel.GraphicsSettings,Nine.ISceneManager{Nine.ISpatialQueryable})">
            <summary>
            Creates the graphics scene to render this world.
            </summary>
        </member>
        <member name="M:Nine.Graphics.WorldExtensions.DestroyGraphics(Nine.World)">
            <summary>
            Destroies the graphics of this world.
            </summary>
        </member>
    </members>
</doc>
